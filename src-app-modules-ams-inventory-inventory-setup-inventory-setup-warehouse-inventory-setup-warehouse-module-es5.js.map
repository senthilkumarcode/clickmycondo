{"version":3,"sources":["webpack:///src/app/modules/ams/inventory/inventory-setup/inventory-setup-warehouse/inventory-setup-warehouse.component.html","webpack:///src/app/modules/ams/inventory/inventory-setup/inventory-setup-warehouse/inventory-setup-warehouse-routing.module.ts","webpack:///src/app/modules/ams/inventory/inventory-setup/inventory-setup-warehouse/inventory-setup-warehouse.component.scss","webpack:///src/app/modules/ams/inventory/inventory-setup/inventory-setup-warehouse/inventory-setup-warehouse.component.ts","webpack:///src/app/modules/ams/inventory/inventory-setup/inventory-setup-warehouse/inventory-setup-warehouse.module.ts"],"names":["routes","path","component","InventorySetupWarehouseRoutingModule","imports","forChild","exports","InventorySetupWarehouseComponent","dialog","injector","purchaseOrderService","staffService","sharedService","lookupService","sessionService","isDataLoaded","isError","ItemStartIndex","itemLimit","unitFieldType","unitOrder","row","warehouseData","tempWarehouseData","backupWarhouse","modalService","get","window","innerWidth","type","value","filter","item","warehouseName","toString","toLowerCase","indexOf","staffParms","apartmentId","roleTypeIds","roleTypeId","getAllStaffs","subscribe","res","length","staffList","error","console","log","queryParamBase","getAllWarehouseByApartmentId","reverse","totalItems","val","warehouseId","ItemEndIndex","data","reqObj","towerLocation","descripition","owner","supervisor","parseInt","userId","Date","toISOString","params","warehouseobj","addWarehouse","message","openSnackBar","getAllGetAllWarehouse","updateWarehouse","setAlertMessage","wareHouseIndex","index","findIndex","splice","showConfirmModal","getAllStaff","selector","template","encapsulation","None","InventorySetupWarehouseModule","declarations"],"mappings":"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","file":"src-app-modules-ams-inventory-inventory-setup-inventory-setup-warehouse-inventory-setup-warehouse-module-es5.js","sourcesContent":["export default \"<div class=\\\"inventory-setup-warehouse-wrapper\\\">\\n\\n    <app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\n    <ng-container *ngIf=\\\"isError\\\">\\n\\n        <!-- Message -->\\n       <condo-message *ngIf=\\\"message\\\" [appearance]=\\\"message.appearance\\\" [showIcon]=\\\"message.showIcon\\\" [type]=\\\"message.type\\\" [@shake]=\\\"message.shake\\\">\\n         {{message.content}}\\n       </condo-message>\\n\\n      </ng-container>\\n\\n    <ng-container *ngIf=\\\"isDataLoaded\\\">\\n\\n        <h4 class=\\\"my-4\\\">Settings</h4>\\n        \\n        <condo-card>\\n            <div CondoCardHeader>\\n                <div class=\\\"d-flex\\\">\\n                    <div>\\n                        <h5>All Warehouse</h5>\\n                        <p class=\\\"text-secondary\\\">{{totalItems}} Items</p>\\n                    </div>\\n                    <div class=\\\"ml-auto d-none d-md-block mr-3\\\">\\n                        <input type=\\\"text\\\" class=\\\"form-control  \\\" placeholder=\\\"Search...\\\"\\n                            [(ngModel)]=\\\"searchWarehouse\\\">\\n                    </div>\\n                </div>\\n            </div>\\n            <div CondoCardBody>\\n                <form>\\n                    <table class=\\\"table\\\" [ngClass]=\\\"isMobileView()\\\">\\n                        <thead>\\n                            <tr>\\n                                <th scope=\\\"col\\\" (click)=\\\"sortUnitData('warehouseName')\\\">Warehouse Name\\n                                    <span [ngClass]=\\\"getFieldOrderBy('warehouseName')\\\"></span></th>\\n                                <th scope=\\\"col\\\" (click)=\\\"sortUnitData('towerLocation')\\\">Tower Location\\n                                    <span [ngClass]=\\\"getFieldOrderBy('towerLocation')\\\"></span></th>\\n                                <th scope=\\\"col\\\" (click)=\\\"sortUnitData('descripition')\\\">Descripition\\n                                    <span [ngClass]=\\\"getFieldOrderBy('descripition')\\\"></span></th>\\n                                <th scope=\\\"col\\\" (click)=\\\"sortUnitData('owner')\\\">Owner\\n                                    <span [ngClass]=\\\"getFieldOrderBy('owner')\\\"></span></th>\\n                                <th scope=\\\"col\\\" (click)=\\\"sortUnitData('supervisor')\\\">Supervisor\\n                                    <span [ngClass]=\\\"getFieldOrderBy('supervisor')\\\"></span></th>\\n                                <th scope=\\\"col\\\">Action</th>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container>\\n                                <tr class=\\\"shadow\\\">\\n                                    <td class=\\\"td-container\\\">\\n                                        <div class=\\\"input-box\\\">\\n                                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"warName\\\"\\n                                                [(ngModel)]=\\\"row.warehouseName\\\">\\n                                                <help-tooltip title=\\\"wareHouseName\\\"></help-tooltip>\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"input-box\\\">\\n                                            <select class=\\\"form-control\\\" name=\\\"warLocation\\\"\\n                                                [(ngModel)]=\\\"row.towerLocation\\\">\\n                                                <option value=\\\"\\\" disabled selected hidden>Select</option>\\n                                                <option *ngFor=\\\"let item of  locationList  | orderBy : 'description'\\\"\\n                                                    [value]=\\\"item.apartmentBlockId\\\">{{ item.description }}\\n                                                </option>\\n                                            </select>\\n                                        </div>\\n\\n                                    </td>\\n                                    <td class=\\\"td-description\\\">\\n\\n                                        <div class=\\\"input-box\\\">\\n                                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"descrip\\\"\\n                                                [(ngModel)]=\\\"row.descripition\\\">\\n                                                <help-tooltip title=\\\"inventoryDescription\\\"></help-tooltip>\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"select-box\\\">\\n                                            <select name=\\\"warOwner\\\" id=\\\"warOwner\\\" class=\\\"form-control\\\"\\n                                                [(ngModel)]=\\\"row.owner\\\">\\n                                                <option value=\\\"\\\" disabled selected hidden>Select</option>\\n                                                <option *ngFor=\\\"let item of staffList  | orderBy : 'staffName'\\\" [ngValue]=\\\"item.staffId\\\"> \\n                                                    {{item.staffName}}, {{item.roleName}} - {{item.staffCategoryName}}\\n                                                </option>\\n                                            </select>\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"input-box\\\">\\n                                            <select class=\\\"form-control\\\" name=\\\"warSupervisor\\\" [(ngModel)]=\\\"row.supervisor\\\">\\n                                                <option value=\\\"\\\" disabled selected hidden>Select</option>\\n                                                <option *ngFor=\\\"let item of staffList  | orderBy : 'staffName'\\\" [ngValue]=\\\"item.staffId\\\"> \\n                                                    {{item.staffName}}, {{item.roleName}} - {{item.staffCategoryName}}\\n                                                </option>\\n                                            </select>\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <mat-icon class=\\\"mt-4 pt-1\\\" svgIcon=\\\"mat_outline:save\\\"\\n                                            [ngClass]=\\\"!row.warehouseName ?'custom-icon-disabled':''\\\"\\n                                            (click)=\\\"addWareHouse(row)\\\"></mat-icon>\\n\\n                                    </td>\\n                                </tr>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n                            </ng-container>\\n                            <ng-container\\n                                *ngFor=\\\"let list of warehouseData  | simpleSearch: searchWarehouse;let inventoryIndex=index\\\">\\n                                <tr>\\n                                    <td>\\n                                        <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                            {{list.warehouseName}}\\n                                        </span>\\n                                        <div class=\\\"input-box\\\" *ngIf=\\\"wareHouseIndex == inventoryIndex\\\">\\n                                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"warehouseName\\\"\\n                                                [(ngModel)]=\\\"list.warehouseName\\\">\\n                                        </div>\\n\\n                                    </td>\\n                                    <td>\\n                                        <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                            <span *ngFor=\\\" let loc of locationList\\\">\\n                                                <span\\n                                                    *ngIf=\\\"list.towerLocation == loc.apartmentBlockId\\\">{{loc.description}}</span>\\n                                            </span>\\n                                        </span>\\n\\n                                        <div class=\\\"input-box\\\" *ngIf=\\\"wareHouseIndex == inventoryIndex\\\">\\n                                            <select class=\\\"form-control\\\" name=\\\"location\\\"\\n                                                [(ngModel)]=\\\"list.towerLocation\\\">\\n                                                <option value=\\\"\\\" disabled selected hidden>Select</option>\\n                                                <option *ngFor=\\\"let item of  locationList\\\"\\n                                                    [value]=\\\"item.apartmentBlockId\\\">{{ item.description }}\\n                                                </option>\\n                                            </select>\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                            {{list.descripition}}\\n                                        </span>\\n\\n                                        <div class=\\\"input-box\\\" *ngIf=\\\"wareHouseIndex == inventoryIndex\\\">\\n                                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"descripition\\\"\\n                                                [(ngModel)]=\\\"list.descripition\\\">\\n                                        </div>\\n\\n                                    </td>\\n                                    <td>\\n\\n                                        <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                            <span> {{list.ownerLabel}} </span>\\n                                        </span>\\n\\n                                        <div class=\\\"input-box\\\" *ngIf=\\\"wareHouseIndex == inventoryIndex\\\">\\n                                            <select class=\\\"form-control\\\" name=\\\"owner\\\" [(ngModel)]=\\\"list.owner\\\">\\n                                                <option value=\\\"\\\" disabled selected hidden>Select</option>\\n                                                <option *ngFor=\\\"let item of staffList  | orderBy : 'staffName'\\\" [ngValue]=\\\"item.staffId\\\"> \\n                                                    {{item.staffName}}, {{item.roleName}} - {{item.staffCategoryName}}\\n                                                </option>\\n                                            </select>\\n\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                            <span> {{list.supervisorLabel}} </span>\\n                                        </span>\\n                                        <div class=\\\"input-box\\\" *ngIf=\\\"wareHouseIndex == inventoryIndex\\\">\\n                                            <select class=\\\"form-control\\\" name=\\\"supervisor\\\" [(ngModel)]=\\\"list.supervisor\\\">\\n                                                <option value=\\\"\\\" disabled selected hidden>Select</option>\\n                                                <option *ngFor=\\\"let item of staffList  | orderBy : 'staffName'\\\" [ngValue]=\\\"item.staffId\\\"> \\n                                                    {{item.staffName}}, {{item.roleName}} - {{item.staffCategoryName}}\\n                                                </option>\\n                                            </select>\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"d-flex align-items-center \\\">\\n\\n                                            <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                                <mat-icon [svgIcon]=\\\"'feather:edit'\\\" class=\\\"pt-2\\\"\\n                                                    (click)=\\\"wareHouseIndex = inventoryIndex;setCurrentData(list)\\\"></mat-icon>\\n                                            </span>\\n\\n                                            <div class=\\\"pt-3 d-flex\\\">\\n                                                <mat-icon class=\\\"pt-1\\\" svgIcon=\\\"mat_outline:save\\\"\\n                                                    [ngClass]=\\\"!list.warehouseId || !list.warehouseId || !list.towerLocation || !list.descripition || !list.owner || !list.supervisor?'custom-icon-disabled':''\\\"\\n                                                    *ngIf=\\\"wareHouseIndex == inventoryIndex\\\"\\n                                                    (click)=\\\"updateWareHouse(list)\\\"></mat-icon>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n                                                    <mat-icon [svgIcon]=\\\"'close'\\\" class=\\\"pt-1\\\" title=\\\"cancel\\\"\\n                                                    *ngIf=\\\"wareHouseIndex == inventoryIndex\\\"\\n                                                    (click)=\\\"wareHouseIndex = -1;cancelWarHouse()\\\"></mat-icon>\\n                                            </div>\\n                                            <span [ngClass]=\\\"wareHouseIndex == inventoryIndex?'d-none':''\\\">\\n                                                <mat-icon [svgIcon]=\\\"'feather:trash'\\\"\\n                                                    class=\\\"pt-2 text-red-900\\\"\\n                                                    (click)=\\\"deleteRow(list)\\\"></mat-icon>\\n                                            </span>\\n                                        </div>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                    </table>\\n\\n                </form>\\n\\n\\n            </div>\\n        </condo-card>\\n\\n    </ng-container>\\n\\n</div>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { InventorySetupWarehouseComponent } from './inventory-setup-warehouse.component';\n\n\nconst routes: Routes = [ {\n  path: '', component: InventorySetupWarehouseComponent\n} ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class InventorySetupWarehouseRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL2ludmVudG9yeS9pbnZlbnRvcnktc2V0dXAvaW52ZW50b3J5LXNldHVwLXdhcmVob3VzZS9pbnZlbnRvcnktc2V0dXAtd2FyZWhvdXNlLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit, Inject, Injector, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n\nimport { PurchaseOrderService } from 'src/app/api/controllers/PurchaseOrder';\nimport { StaffService } from 'src/app/api/controllers/Staff';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { ModalService } from 'src/app/shared/services/modal.service';\n\n\n@Component({\n  selector: 'app-inventory-setup-warehouse',\n  templateUrl: './inventory-setup-warehouse.component.html',\n  styleUrls: ['./inventory-setup-warehouse.component.scss'],\n\tencapsulation: ViewEncapsulation.None,\n})\nexport class InventorySetupWarehouseComponent implements OnInit {\n\n\n  isDataLoaded:boolean = false;\n  isError:boolean = false;\n\n  ItemStartIndex: any = 0;\n\tItemEndIndex: any;\n\ttotalItems: any;\n\titemLimit: any = 10;\n\n  searchWarehouse:any;\n\n  unitFieldType: string = \"unitno\";\n\tunitOrder: boolean = false;\n\n  row: any = {};\n  locationList: any;\n  staffList: any;\n\n  message: any;\n  \n  warehouseData: any = [];\n  tempWarehouseData: any = []\n  wareHouseIndex: any;\n  backupWarhouse:any = {};\n  \n\n  modalService: any;\n\n  constructor(\n    public dialog: MatDialog,\n    private injector: Injector,\n    private purchaseOrderService: PurchaseOrderService,\n    private staffService: StaffService,\n    private sharedService: SharedService,\n    private lookupService: LookupService,\n    private sessionService: SessionService\n  ) {\n\n    this.modalService = this.injector.get(ModalService);\n\n   }\n\n  isMobileView() {\n\t\treturn window.innerWidth <= 767 ? 'table-responsive' : '';\n\t}\n\n  sortUnitData(type) {\n\t\tthis.unitFieldType = type;\n\t\tthis.unitOrder = !this.unitOrder;\n\t}\n\n  getFieldOrderBy(type) {\n\t\tif (this.unitFieldType == type) {\n\t\t\treturn this.unitOrder ? 'desc' : 'asc';\n\t\t}\n\t\telse return '';\n\t}\n\n  filterWareHouse(value) {\n    this.warehouseData = this.tempWarehouseData.filter((item: any) =>{\n      item.warehouseName.toString().toLowerCase().indexOf(value.toLowerCase()) > -1;\n    })\n  }\n\n  getAllStaff() {\n\t\tlet staffParms = {\n\t\t\tapartmentId: this.sessionService.apartmentId,\n\t\t\troleTypeIds: this.sessionService.roleTypeId\n\t\t}\n\t\tthis.staffService.getAllStaffs(staffParms).subscribe((res:any) => {\n\t\t\tif(res.length) {\n\t\t\t\tthis.staffList = res;\n\t\t\t}\n\t\t},error => {\n\t\t\tconsole.log(error)\n\t\t});\n\t}\n\n  getAllGetAllWarehouse() {\n\t\tlet queryParamBase: any = {};\n\t\tqueryParamBase = {\n\t\t\tapartmentId: this.sessionService.apartmentId\n\n\t\t};\n\t\tthis.isDataLoaded = false;\n\t\tthis.purchaseOrderService.getAllWarehouseByApartmentId(queryParamBase).subscribe((res: any) => {\n\t\t\tif (res) {\n\t\t\t\tthis.warehouseData = res && res.length > 0 ? res.reverse() : [];\n\t\t\t\tthis.isDataLoaded = true;\n\t\t\t\tthis.tempWarehouseData = this.warehouseData;\n\t\t\t\tthis.totalItems = this.warehouseData.length;\n\t\t\t\tif (this.warehouseData && this.warehouseData.length > 0) {\n\t\t\t\t\tthis.warehouseData.filter(val => {\n\t\t\t\t\t\tif (val.warehouseName == '') {\n\t\t\t\t\t\t\tdelete val.warehouseName;\n\t\t\t\t\t\t\tdelete val.warehouseId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\n\t\t\t\tif (this.totalItems > this.itemLimit) {\n\t\t\t\t\tthis.ItemEndIndex = this.itemLimit;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.ItemEndIndex = this.totalItems;\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t});\n\t}\n\n  addWareHouse(data) {\n\n\t\tlet reqObj: any = {};\n\t\t\n    reqObj = {\n\t\t\t\"warehouseId\": data.warehouseId,\n\t\t\t\"apartmentId\": this.sessionService.apartmentId,\n\t\t\t\"warehouseName\": data.warehouseName,\n\t\t\t\"towerLocation\": data.towerLocation,\n\t\t\t\"unitOfMeasureId\": null,\n\t\t\t\"descripition\": data.descripition,\n\t\t\t\"owner\": data.owner,\n\t\t\t\"supervisor\": data.supervisor,\n\t\t\t\"isActive\": true,\n\t\t\t\"insertedBy\": parseInt(this.sessionService.userId),\n\t\t\t\"insertedOn\": new Date().toISOString,\n\t\t\t\"updatedBy\": 0,\n\t\t\t\"updatedOn\": new Date().toISOString,\n\t\t}\n\t\tlet params: any = {};\n\t\tparams.warehouseobj = reqObj;\n\t\tthis.purchaseOrderService.addWarehouse(params).subscribe((res: any) => {\n\t\t\tif (res.message) {\n\t\t\t\tthis.sharedService.openSnackBar('Warehouse added Successfully','success');\n\t\t\t\tthis.isDataLoaded = true;\n\t\t\t\tthis.row = {};\n\t\t\t\tthis.getAllGetAllWarehouse();\n\t\t\t}\n\n\t\t});\n\t}\n\n\tupdateWareHouse(data) {\n\t\t\n    let reqObj: any = {};\n\t\t\n    reqObj = {\n\t\t\t\"warehouseId\": data.warehouseId,\n\t\t\t\"apartmentId\": this.sessionService.apartmentId,\n\t\t\t\"warehouseName\": data.warehouseName,\n\t\t\t\"towerLocation\": data.towerLocation,\n\t\t\t\"unitOfMeasureId\": null,\n\t\t\t\"descripition\": data.descripition,\n\t\t\t\"owner\": data.owner,\n\t\t\t\"supervisor\": data.supervisor,\n\t\t\t\"isActive\": true,\n\t\t\t\"insertedBy\": parseInt(this.sessionService.userId),\n\t\t\t\"insertedOn\": new Date().toISOString,\n\t\t\t\"updatedBy\": parseInt(this.sessionService.userId),\n\t\t\t\"updatedOn\": new Date().toISOString,\n\t\t}\n\t\tlet params: any = {};\n\t\tparams.warehouseobj = reqObj;\n\t\tthis.purchaseOrderService.updateWarehouse(params).subscribe((res: any) => {\n\t\t\tif (res) {\n\t\t\t\tthis.sharedService.setAlertMessage(\"Warehouse Updated successfully\");\n\t\t\t\tthis.isDataLoaded = true;\n\t\t\t\tthis.wareHouseIndex = -1;\n\t\t\t}\n\n\t\t});\n\t}\n\n  setCurrentData(data) {\n\t\tthis.backupWarhouse  = {...data}\n\t}\n\n\tcancelWarHouse() {\n\t\tlet index = this.warehouseData.findIndex((data)=>data.warehouseId == this.backupWarhouse.warehouseId);\n\t\tthis.warehouseData.splice(index,1,this.backupWarhouse);\n\t}\n\n  deleteRow(data) {\n\t\tthis.modalService.showConfirmModal(data.warehouseId);\n\t}\n\n  \n\n  ngOnInit(): void {\n\n    this.getAllGetAllWarehouse();\n    this.getAllStaff();\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nimport { CondoCardModule } from 'src/app/modules/ui/card/card.module';\nimport { SelectModule } from 'src/app/modules/ui/select/select.module';\nimport { ListModule } from 'src/app/modules/ui/list/list.module';\nimport { CondoMessageModule } from 'src/app/modules/ui/message/message.module';\nimport { HelpTooltipModule } from 'src/app/modules/ui/help-tooltip/help-tooltip.module';\n\nimport { InventorySetupWarehouseRoutingModule } from './inventory-setup-warehouse-routing.module';\nimport { InventorySetupWarehouseComponent } from './inventory-setup-warehouse.component';\n\n\n@NgModule({\n  declarations: [InventorySetupWarehouseComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    CondoCardModule,\n    SelectModule,\n    ListModule,\n    CondoMessageModule,\n    HelpTooltipModule,\n    InventorySetupWarehouseRoutingModule\n  ]\n})\nexport class InventorySetupWarehouseModule { }\n"]}
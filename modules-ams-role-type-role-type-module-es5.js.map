{"version":3,"sources":["webpack:///src/app/modules/ams/role-type/components/add-role/add-role.component.html","webpack:///src/app/modules/ams/role-type/components/add-role/add-role.component.scss","webpack:///src/app/modules/ams/role-type/components/add-role/add-role.component.ts","webpack:///src/app/modules/ams/role-type/role-type-routing.module.ts","webpack:///src/app/modules/ams/role-type/role-type.module.ts"],"names":["AddRoleComponent","userService","router","activatedRoute","sessionService","screenService","allRoles","isCreate","params","id","undefined","menuRoleSecLevelId","getRole","getAllRoles","queryParamBase","apartmentId","getMenuRoleSecLevelbyRoleSecLevelId","subscribe","resp","menuRole","roleTypeId","roleId","roleName","getAllRoleTypes","length","filter","key","value","splice","indexOf","addMenuLevelParam","userId","Date","toISOString","secLevelParam","seclevel","addMenuSecLevel","message","addMenuRoleSecLevel","parseInt","roleSecLevelParam","roleseclevel","navigate","updataParam","updateRoleParam","menuSecLevel","updateMenuSecLevel","selector","template","routes","path","redirectTo","pathMatch","component","RoleTypeRoutingModule","imports","forChild","exports","RoleTypeModule","declarations"],"mappings":"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","file":"modules-ams-role-type-role-type-module-es5.js","sourcesContent":["export default \"<div class=\\\"parking-create-parking-slot-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<form #createParkingSlotForm=\\\"ngForm\\\" name=\\\"addSlotForm\\\" novalidate>\\n\\t\\t\\t<condo-card>\\n\\t\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex\\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Create Roles</h4>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t\\t<div class=\\\"p-5\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"select-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Roles Type</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<select name=\\\"roleTypeId\\\" [(ngModel)]=\\\"roleTypeId\\\" class=\\\"form-control\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let item of allRoles\\\" value=\\\"{{item.value}}\\\">{{item?.name}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Roles Name</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"roleName\\\" [(ngModel)]=\\\"roleName\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"select-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Description</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<textarea name=\\\"description\\\" [(ngModel)]=\\\"description\\\" cols=\\\"10\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trows=\\\"3\\\"></textarea>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12 d-flex justify-content-end\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"mr-3\\\" mat-flat-button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trouterLink=\\\"/ams/roles-permissions/role-permissions-list\\\" routerLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[routerLinkActiveOptions]=\\\"{exact:true}\\\">Cancel</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" *ngIf=\\\"isCreate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"addRole()\\\">Submit</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" *ngIf=\\\"!isCreate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"updateRole()\\\">Update</button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</condo-card>\\n\\t\\t</form>\\n\\t</div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3JvbGUtdHlwZS9jb21wb25lbnRzL2FkZC1yb2xlL2FkZC1yb2xlLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/api/controllers/User';\nimport { ScreenService } from 'src/app/api/controllers/Screen';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/core/session/session.service';\n\n@Component({\n  selector: 'app-add-role',\n  templateUrl: './add-role.component.html',\n  styleUrls: ['./add-role.component.scss']\n})\nexport class AddRoleComponent implements OnInit {\n\n  allRoles: Array<any> = [];\n  roleTypeId: any;\n  roleName: any;\n  description: any;\n  menuRoleSecLevelId:any;\n  isCreate:boolean=true;\n  menuRole:any;\n  constructor(private userService: UserService,\n    private router: Router,\n    private activatedRoute : ActivatedRoute,\n    private sessionService : SessionService,\n    private screenService: ScreenService) { }\n\n  ngOnInit(): void {\n    if (this.activatedRoute.params['value'].id != undefined) {\n      this.menuRoleSecLevelId = this.activatedRoute.params['value'].id;\n      this.isCreate = false;\n      this.getRole();\n    }\n    this.getAllRoles();\n  }\n\n  getRole(){\n      let queryParamBase = {\n      apartmentId: this.sessionService.apartmentId,\n      menuRoleSecLevelId: this.menuRoleSecLevelId,\n    };\n    this.screenService.getMenuRoleSecLevelbyRoleSecLevelId(queryParamBase).subscribe(\n      resp =>{\n        this.menuRole = resp[0];\n        this.roleTypeId = this.menuRole.roleId;\n        this.roleName = this.menuRole.roleName;\n      }\n    )\n  }\n\n  getAllRoles() {\n    this.userService.getAllRoleTypes().subscribe(\n      (resp: any) => {\n        this.allRoles = resp;\n        if (this.allRoles && this.allRoles.length) {\n          this.allRoles.filter(key => {\n            if (key.value == 2 || key.value == 4 || key.value == 5) {\n              this.allRoles.splice(this.allRoles.indexOf(key), 1);\n            }\n          })\n        }\n      }\n    )\n  }\n\n  addRole() {\n    let addMenuLevelParam = {\n      \"menuSecLevelId\": 0,\n      \"apartmentId\": this.sessionService.apartmentId,\n      \"name\": this.roleName,\n      \"isActive\": true,\n      \"insertedBy\": this.sessionService.userId,\n      \"insertedOn\": new Date().toISOString(),\n      \"updatedBy\": this.sessionService.userId,\n      \"updatedOn\": \"2020-08-09T06:22:21.539Z\"\n    }\n    let secLevelParam = {\n      seclevel: addMenuLevelParam\n    }\n    this.screenService.addMenuSecLevel(secLevelParam).subscribe(\n      (resp:any) => {\n        if (resp && resp.message) {\n          let addMenuRoleSecLevel = {\n            \"menuRoleSecLevelId\": 0,\n            \"apartmentId\": this.sessionService.apartmentId,\n            \"roleId\": parseInt(this.roleTypeId),\n            \"secLevelId\": resp.message,\n            \"isActive\": true,\n            \"insertedBy\": this.sessionService.userId,\n            \"insertedOn\": new Date().toISOString(),\n            \"updatedBy\": this.sessionService.userId,\n            \"updatedOn\": \"2020-08-09T06:22:21.539Z\"\n          }\n          let roleSecLevelParam = {\n            roleseclevel: addMenuRoleSecLevel\n          }\n          this.screenService.addMenuRoleSecLevel(roleSecLevelParam).subscribe(\n            resp => {\n              this.router.navigate(['/ams/roles-permissions/role-permissions-list']);\n            }\n          )\n        }\n      }\n    )\n  }\n\n  updateRole(){\n    let updataParam = {\n      \"menuSecLevelId\": this.menuRole.menuRoleSecLevelId,\n      \"apartmentId\":  this.sessionService.apartmentId,\n      \"name\": this.roleName,\n      \"isActive\": true,\n      \"insertedBy\": 0,\n      \"insertedOn\": new Date().toISOString(),\n      \"updatedBy\": this.sessionService.userId,\n      \"updatedOn\": new Date().toISOString()\n    }\n    let updateRoleParam = {\n      menuSecLevel : updataParam\n    }\n    this.screenService.updateMenuSecLevel(updateRoleParam).subscribe(\n      resp =>{\n        this.router.navigate(['/ams/roles-permissions/role-permissions-list']);\n      }\n    )\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddRoleComponent } from './components/add-role/add-role.component';\n\n\n\n\nconst routes: Routes = [\n\t{ path: '', redirectTo: 'roles-type-list', pathMatch: 'full'},\n\t{ path: 'add-roles-permissions', component: AddRoleComponent},\n\t{ path: 'edit-roles-permissions/:id', component: AddRoleComponent},\n\t{ path: '**', redirectTo: 'roles-type-list', pathMatch: 'full'}\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RoleTypeRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddRoleComponent } from './components/add-role/add-role.component';\nimport { RoleTypeRoutingModule } from './role-type-routing.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [AddRoleComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RoleTypeRoutingModule\n  ]\n})\nexport class RoleTypeModule { }\n"]}
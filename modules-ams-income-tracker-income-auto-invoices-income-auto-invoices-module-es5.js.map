{"version":3,"sources":["webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/create-monthly-invoice/create-monthly-invoice.component.html","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/view-monthly-invoice/view-monthly-invoice.component.html","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/create-monthly-invoice/create-monthly-invoice.component.scss","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/create-monthly-invoice/create-monthly-invoice.component.ts","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/income-auto-invoices-routing.module.ts","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/income-auto-invoices.module.ts","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/view-monthly-invoice/view-monthly-invoice.component.scss","webpack:///src/app/modules/ams/income-tracker/income-auto-invoices/view-monthly-invoice/view-monthly-invoice.component.ts"],"names":["CreateMonthlyInvoiceComponent","accountsService","lookupService","sharedService","sessionService","apartmentService","injector","router","isAutoInvoicingDataLoaded","glAccountList","billAmountList","vatPecentageDataList","taxPecentageDataList","generateAutoInvoiceForm","showFields","invoice","modalService","get","navigate","window","innerWidth","date","format","length","data","typeId","varAmount","fixedAmount","glaccountId","description","vatId","taxId","push","amountCalc","entity","apartmentId","billCreationDate","dueDate","userId","res","message","openSnackBar","errorMessage","invoiceTable","billAmountParams","ApartmentId","LookupTypeId","getLookupValueByLookupTypeId","subscribe","vatListParams","taxListParams","queryParamBase","GLAccountTypeId","getGlAccountsIdbyGlAccountTypeId","selector","template","encapsulation","None","routes","path","component","IncomeAutoInvoicesRoutingModule","imports","forChild","exports","IncomeAutoInvoicesModule","declarations","ViewMonthlyInvoiceComponent","_overlay","_viewContainerRef","dialog","constantsService","prevInvoiceSearch","prevInvoice","event","filtergroup","jqx","filter","filter_or_operator","filtervalue","filtercondition","filterData","createfilter","operator","addfilter","datagrid","showfiltercolumnbackground","prevColumnData","forEach","item","datafield","applyfilters","clearfilters","detail","row","getrowdata","rowId","invoiceParams","invoiceId","custInvoiceId","getCustInvoicesByApartmentId","params","isInvoicePrintLoaded","open","viewInvoiceDetailsRef","panelClass","fromDate","toDate","InvoiceFromDate","InvoiceToDate","getCustInvoicesByApartmentIdNew","invoiceDataList","responseData","value","towerUnit","apartmentBlockNumber","apartmentBlockUnitNumber","prevTotalItems","tableInfo","localdata","datatype","prevInvoiceDataList","dataAdapter","document","getElementById","then","canvas","imgWidth","pageHeight","imgHeight","height","width","heightLeft","contentDataURL","toDataURL","pdf","position","addImage","save","getAllInvoicesData","cellsrenderer","column","columnrenderer","text","pinned","renderer","minwidth","downloadInvoiceEvent","CustomEvent","dispatchEvent"],"mappings":"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","file":"modules-ams-income-tracker-income-auto-invoices-income-auto-invoices-module-es5.js","sourcesContent":["export default \"<div class=\\\"income-tracker-auto-monthly-invoice-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n        <h4 class=\\\"mb-4\\\">Create Automatic Monthly Invoice</h4>\\n\\t\\t<div>\\n\\t\\t\\t<form>\\n\\t\\t\\t\\t<div class=\\\"bg-card shadow\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-sm-4\\\">\\n                            <div class=\\\"input-box\\\">\\n                                <label>Date Of Bill Creation</label>\\n                                <input class=\\\"form-control\\\" name=\\\"dateOfBill\\\" [owlDateTime]=\\\"dateOfBill\\\" [owlDateTimeTrigger]=\\\"dateOfBill\\\"\\n                                placeholder=\\\"Date\\\" [(ngModel)]=\\\"invoice.billCreationDate\\\" autocomplete=\\\"off\\\">\\n                                <owl-date-time #dateOfBill [pickerType]=\\\"'calendar'\\\"></owl-date-time>\\n                                <div class=\\\"date-btn\\\">\\n                                    <mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"col-sm-4\\\">\\n                            <div class=\\\"input-box\\\">\\n                                <label>Due Date</label>\\n                                <input class=\\\"form-control\\\" name=\\\"dueDate\\\" [owlDateTime]=\\\"dueDate\\\" [owlDateTimeTrigger]=\\\"dueDate\\\"\\n                                    placeholder=\\\"Date\\\" [(ngModel)]=\\\"invoice.dueDate\\\" autocomplete=\\\"off\\\">\\n                                <owl-date-time #dueDate [pickerType]=\\\"'calendar'\\\"></owl-date-time>\\n                                <div class=\\\"date-btn\\\">\\n                                    <mat-icon svgIcon=\\\"feather:calendar\\\"></mat-icon>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\t\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"bg-card shadow p-0\\\">\\n                    <div class=\\\"text-right pr-3 py-4\\\">\\n                        <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"addForm()\\\">\\n                            <mat-icon class=\\\"mr-2\\\" [svgIcon]=\\\"'add'\\\"></mat-icon>Add\\n                        </button>\\n                    </div>\\n                    <table id=\\\"setupAutoInvoicingAccordion\\\" class=\\\"table table-resizable\\\" [ngClass]=\\\"isMobileView()\\\" *ngIf=\\\"generateAutoInvoiceForm.length > 0\\\">\\n                        <thead>\\n                            <tr>\\n                                <th scope=\\\"col\\\">Bill Amount</th>\\n                                <th scope=\\\"col\\\">Amount For Calc</th>\\n                                <th scope=\\\"col\\\">Fixed Amount</th>\\n                                <th scope=\\\"col\\\">GL Account</th>\\n                                <th scope=\\\"col\\\">Description</th>\\n                                <th scope=\\\"col\\\">Tax</th>\\n                                <th scope=\\\"col\\\">Vat</th>\\n                                <th scope=\\\"col\\\">Action</th>\\n                            </tr>\\n                        </thead>\\n                        <tbody>\\n                            <ng-container *ngFor=\\\"let item of generateAutoInvoiceForm; let i = index;\\\">\\n                                <tr>\\n                                    <td>\\n                                        <select name=\\\"billAmountType\\\" [(ngModel)]=\\\"item.typeId\\\" (change)=\\\"billAmountChange(item)\\\" class=\\\"form-control\\\">\\n                                            <option [ngValue]=\\\"null\\\" selected hidden>select</option>\\n                                            <option *ngFor=\\\"let data of billAmountList\\\" [ngValue]=\\\"data.lookupValueId\\\">\\n                                                {{ data.lookupValueName}}\\n                                            </option>\\n                                        </select>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"input-container\\\">\\n                                            <input class=\\\"form-control\\\" OnlyNumber=\\\"true\\\" name=\\\"amountCalculation\\\" placeholder=\\\"Amount\\\" \\n                                            [(ngModel)]=\\\"item.varAmount\\\" [disabled]=\\\"item.typeId == 386\\\">\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"input-container\\\">\\n                                            <input class=\\\"form-control\\\" OnlyNumber=\\\"true\\\" name=\\\"fixedAmount\\\" placeholder=\\\"Fixed\\\" \\n                                            [(ngModel)]=\\\"item.fixedAmount\\\" [disabled]=\\\"item.typeId == 387 || item.typeId == 388\\\">\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <select name=\\\"accountId\\\" [(ngModel)]=\\\"item.glaccountId\\\" class=\\\"form-control\\\">\\n                                            <option [ngValue]=\\\"null\\\" selected hidden>select</option>\\n                                            <option *ngFor=\\\"let data of glAccountList\\\" [ngValue]=\\\"data.glaccountId\\\">\\n                                                {{ data.glaccountNumber}} - {{ data.glaccountName }}\\n                                            </option>\\n                                        </select>\\n                                    </td>\\n                                    <td>\\n                                        <div class=\\\"input-container\\\">\\n                                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"description\\\" placeholder=\\\"Description\\\" [(ngModel)]=\\\"item.description\\\">\\n                                        </div>\\n                                    </td>\\n                                    <td>\\n                                        <select name=\\\"tax\\\" [(ngModel)]=\\\"item.taxId\\\" class=\\\"form-control\\\">\\n                                            <option [ngValue]=\\\"null\\\" selected hidden>select</option>\\n                                            <option *ngFor=\\\"let data of taxPecentageDataList\\\" [ngValue]=\\\"data.lookupValueId\\\">\\n                                                {{ data.lookupValueName}}\\n                                            </option>\\n                                        </select>\\n                                    </td>\\n                                    <td>\\n                                        <select name=\\\"vat\\\" [(ngModel)]=\\\"item.vatId\\\" class=\\\"form-control\\\">\\n                                            <option [ngValue]=\\\"null\\\" selected hidden>select</option>\\n                                            <option *ngFor=\\\"let data of vatPecentageDataList\\\" [ngValue]=\\\"data.lookupValueId\\\">\\n                                                {{ data.lookupValueName}}\\n                                            </option>\\n                                        </select>\\n                                    </td>\\n                                    <td>\\n                                        <mat-icon (click)=\\\"addAutoinvoiceConfig(item)\\\" svgIcon=\\\"mat_outline:save\\\" title=\\\"Save\\\"></mat-icon>\\n                                        <mat-icon class=\\\"ml-2\\\" [svgIcon]=\\\"'close'\\\" title=\\\"Close\\\" (click)=\\\"closeForm()\\\"></mat-icon>\\n                                    </td>\\n                                </tr>\\n                            </ng-container>\\n                        </tbody>\\n                    </table>\\n                </div>\\n                <div class=\\\"bg-card shadow\\\" *ngIf=\\\"generateAutoInvoiceForm.length > 0\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-sm-12\\\">\\n                            <p class=\\\"text-muted\\\"><span class=\\\"required\\\">*</span> Based on Sq.m - Maintain Sq.m in each unit to calculate the cost per Unit</p>\\n                            <p class=\\\"text-muted\\\"><span class=\\\"required\\\">*</span> Based on Consumption (Water) - Maintain Sq.m in each unit to calculate the cost per Unit</p>\\n                            <p class=\\\"text-muted\\\"><span class=\\\"required\\\">*</span> Based on Power Units Consumption - Maintain Entry in utilities Menu</p>                     \\n                        </div>\\n                        <div class=\\\"col-sm-12\\\">\\n                            <div class=\\\"text-right\\\">\\n                                <button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"showInvoiceTable()\\\">Preview Invoice For All Units</button>\\n                                <button class=\\\"ml-3\\\" mat-flat-button [color]=\\\"'accent'\\\">Create Final Invoice</button>\\n                            </div>\\n                        </div>\\n                    </div>\\n                 </div>\\n\\t\\t\\t</form>\\n        </div>\\n        <div *ngIf=\\\"invoiceTable\\\">\\n            <app-view-monthly-invoice></app-view-monthly-invoice>\\n        </div>\\n\\t</div>\\n</div>\";","export default \"<div>\\n    <condo-card>\\n        <div CondoCardHeader>\\n            <div class=\\\"d-flex\\\">\\n                <div>\\n                    <h4>Preview Invoices</h4>\\n                    <p>{{totalItems}} results</p>\\n                </div>\\n                <div class=\\\"ml-auto d-none d-md-block mr-3\\\">\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"invoiceData\\\" (ngModelChange)=\\\"onGlSearchFilter()\\\">\\n                </div>\\n                <div>\\n                    <app-print-dropdown (outputParams) =\\\"getPrintParams($event)\\\"></app-print-dropdown>\\n                </div>\\n            </div>\\n        </div>\\n        <div CondoCardBody>\\n            <jqxGrid \\n                    [theme]=\\\"'material'\\\" \\n                    [width]=\\\"'100%'\\\"\\n                    [rowsheight]=\\\"48\\\"\\n                    [autoheight]=\\\"true\\\"\\n                    [pageable]=\\\"true\\\" \\n                    [filterable]=\\\"true\\\" \\n                    [sortable]=\\\"true\\\" \\n                    [source]=\\\"prevInvoiceDataList\\\"\\n                    [columns]=\\\"prevColumnData\\\"\\n                    [enablehover]=\\\"false\\\"\\n                #datagrid>\\n            </jqxGrid>\\n        </div>\\n    </condo-card>\\n\\n    <ng-template #viewInvoiceDetailsRef>\\n        <div class=\\\"invoice-info info-modal-box rel\\\">\\n            <div class=\\\"d-flex p-4\\\">\\n                <h4>Invoice Info</h4>\\n                <mat-icon class=\\\"ml-auto\\\" [svgIcon]=\\\"'close'\\\" mat-dialog-close></mat-icon>\\n            </div>\\n            <app-loader *ngIf=\\\"!isInvoicePrintLoaded\\\"></app-loader>\\n            <ng-container *ngIf=\\\"isInvoicePrintLoaded\\\">\\n                <div id=\\\"InvoiceElement\\\">\\n                    <div class=\\\"text-center bg-cool-gray-100 p-4\\\">\\n                        <h4 class=\\\"pb-3\\\">{{apartmentDetails.apartmentName}}</h4>\\n                        <h6>{{apartmentDetails.address1}}</h6>\\n                        <div class=\\\"mt-2\\\">\\n                            <p class=\\\"text-secondary\\\"><span class=\\\"font-medium mr-2\\\">Mobile No:</span>{{apartmentDetails.phoneNumber}}</p>\\n                            <p class=\\\"text-secondary\\\"><span class=\\\"font-medium mr-2\\\">Email:</span>{{apartmentDetails.emailId}}</p>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"bg-card p-0 border-bottom\\\">\\n                        <div class=\\\"d-flex pt-4 pb-4 border-bottom\\\">\\n                            <div class=\\\"pl-4\\\">\\n                                <p class=\\\"text-secondary\\\"><span class=\\\"font-medium mr-2\\\">Tower Unit:</span> {{prevInvoice.apartmentBlockNumber}}</p>\\n                                <p class=\\\"text-secondary\\\"><span class=\\\"font-medium mr-2\\\">Contact Person:</span> {{prevInvoice.primaryContact}}</p>\\n                            </div>\\n                            <div class=\\\"ml-auto pr-4\\\">\\n                                <p class=\\\"text-secondary\\\"><span class=\\\"font-medium mr-2\\\">Invoice ID:</span> {{prevInvoice.custInvoiceId}}</p>\\n                                <p class=\\\"text-secondary\\\"><span class=\\\"font-medium mr-2\\\">Invoice Date:</span> {{getDate(invoice.postedOn)}}</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"\\\">{{invoice.length}}</div>\\n                        <table class=\\\"table card-table\\\" [ngClass]=\\\"isMobileView()\\\">\\n                            <thead>\\n                                <tr>\\n                                    <th>Income Accounts</th>\\n                                    <th>Rate</th>\\n                                    <th>Comments</th>\\n                                    <th>Discount</th>\\n                                    <th>Tax</th>\\n                                    <th>Amount</th>\\n                                </tr>\\n                            </thead>\\n                            <tbody>\\n                                <tr *ngFor=\\\"let item of prevInvoice.invoiceGLAccounts; let i = index\\\">\\n                                    <td>{{item.glaccountName}}</td>\\n                                    <td>{{item.amount}}</td>\\n                                    <td>{{item.comments}}</td>\\n                                    <td>{{item.discountAmount}} ({{item.discountTypeId}})</td>\\n                                    <td>{{item.vatamount}} <!-- [{{ getVatType(custTaxDetails[i])}}%] --></td>\\n                                    <td>{{item.lineItemTotal + item.vatamount}}</td>\\n                                </tr>\\n                                <tr>\\n                                    <td colspan=\\\"5\\\">Final Discount:</td>\\n                                    <td>{{invoice.invoicefinalinputdiscount}} ({{invoice.finalDiscountTypeName}})</td>\\n                                </tr>\\n                                <tr class=\\\"total font-medium\\\">\\n                                    <td colspan=\\\"5\\\">Total Amount:</td>\\n                                    <td>{{invoice.custInvoiceAmount}}</td>\\n                                </tr>\\n                            </tbody>\\n                        </table>\\n                    </div>\\n                </div>\\n                <div class=\\\"text-center m-5\\\">\\n                    <button class=\\\"print\\\" mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"printInvoice()\\\">\\n                        <mat-icon class=\\\"mr-2\\\" svgIcon=\\\"feather:printer\\\"></mat-icon>\\n                        Print\\n                    </button>\\n                </div>\\n            </ng-container>\\n    \\n    \\n        </div>\\n    </ng-template>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL2luY29tZS10cmFja2VyL2luY29tZS1hdXRvLWludm9pY2VzL2NyZWF0ZS1tb250aGx5LWludm9pY2UvY3JlYXRlLW1vbnRobHktaW52b2ljZS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, Injector, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { AccountsService } from 'src/app/api/controllers/Accounts';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport * as moment from 'moment';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-create-monthly-invoice',\n  templateUrl: './create-monthly-invoice.component.html',\n  styleUrls: ['./create-monthly-invoice.component.scss'],\n  encapsulation  : ViewEncapsulation.None\n})\n\nexport class CreateMonthlyInvoiceComponent implements OnInit {\n\tisAutoInvoicingDataLoaded: boolean = false;\n\ttotalItems: any;\n\tglAccountList: any = [];\n\tbillAmountList: any = [];\n\tvatPecentageDataList: any = [];\n\ttaxPecentageDataList: any = [];\n\tmodalService: any;\n\tgenerateAutoInvoiceForm = [];\n\tshowFields:number = -1;\n\tinvoice:any = {};\n\n\tinvoiceTable:boolean;\n  \n\tconstructor(private accountsService: AccountsService,\n\t\tprivate lookupService: LookupService,\n\t\tprivate sharedService: SharedService,\n\t\tprivate sessionService: SessionService,\n\t\tprivate apartmentService:ApartmentService,\n    \tprivate injector: Injector,\n    \tprivate router: Router\n \t){\n\t\tthis.modalService = this.injector.get(ModalService);\n  \t}\n    \n\tnavigateViewInvoice() {\n\t\tthis.router.navigate(['ams/income/auto-invoices/view-invoice'])\n\t}\n\n\tisMobileView() {\n\t\treturn window.innerWidth <= 767 ? 'table-responsive' : '';\n\t}\n\n\tgetDateFormat(date){\n\t\treturn moment(date).format(\"MM-DD-YYYY\");\n\t}\n\n\taddForm() {\n\t\tif(this.generateAutoInvoiceForm.length < 1) {\n\t\t\tlet data = {\n\t\t\t\ttypeId : null,\n\t\t\t\tvarAmount: null,\n\t\t\t\tfixedAmount : null,\n\t\t\t\tglaccountId : null,\n\t\t\t\tdescription : '',\n\t\t\t\tvatId : null,\n\t\t\t\ttaxId : null,\n\t\t\t}\n\t\t\tthis.generateAutoInvoiceForm.push(data);\n\t\t}\n\t\t//this.showFields = -1;\n\t}\n\n\tcloseForm() {\n\t\tthis.generateAutoInvoiceForm = [];\n  \t}\n  \n  \tbillAmountChange(data) {\n\t\tdata.amountCalc = null;\n\t\tdata.fixedAmount = null;\n\t\tdata.glaccountId = null;\n\t\tdata.description = ''; \n\t\tdata.vatId = null;\n\t\tdata.taxId = null;\n\t  }\n\t  \n\taddAutoinvoiceConfig(data) {\n\t\tlet entity = {\n\t\t\t\"apartmentId\": this.sessionService.apartmentId,\n\t\t\t\"billCreationDate\": this.invoice.billCreationDate,\n\t\t\t\"dueDate\" : this.invoice.dueDate,\n\t\t\t\"insertedBy\": this.sessionService.userId,\n\t\t\t\"autoInvoiceItem\": [\n\t\t\t\t{\n\t\t\t\t\t\"description\": data.description,\n\t\t\t\t\t\"glaccountId\": data.glaccountId,\n\t\t\t\t\t\"typeId\": data.typeId,\n\t\t\t\t\t\"taxId\": data.taxId,\n\t\t\t\t\t\"discountId\": 0,\n\t\t\t\t\t\"varAmount\": data.varAmount,\n\t\t\t\t\t\"fixedAmount\": data.fixedAmount,\n\t\t\t\t\t\"vatId\": data.vatId\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\tlet res;\n\t\tif(res.message) {\n\t\t\tthis.sharedService.openSnackBar('Auto Invoice Created Successfully','success');\n\t\t} else {\n\t\t\tthis.sharedService.openSnackBar(res.errorMessage,'error');\n\t\t}\n\t}\n\n\t//Preview Invoice Logic \n\n\tshowInvoiceTable() {\n\t\tthis.invoiceTable = !this.invoiceTable;\n\t}\n\n\n\n\tngOnInit(): void {\n\t\t//Bill Amount List\n\t\tlet billAmountParams = {\n\t\t\tApartmentId: this.sessionService.apartmentId,\n\t\t\tLookupTypeId: 201\n\t\t}\n\t\tthis.lookupService.getLookupValueByLookupTypeId(billAmountParams).subscribe((res: any) => {\n      \t\tif (res.length > 0) {\n\t\t\t\tthis.billAmountList = res;\n\t\t\t}\n\t\t});\n\t\t//VAT List\n\t\tlet vatListParams = {\n\t\t\tApartmentId: this.sessionService.apartmentId,\n\t\t\tLookupTypeId: 77\n\t\t}\n\t\tthis.lookupService.getLookupValueByLookupTypeId(vatListParams).subscribe((res: any) => {\n      \t\tif (res.length > 0) {\n\t\t\t\tthis.vatPecentageDataList = res;\n\t\t\t}\n\t\t});\n\t\t//TAX List\n\t\tlet taxListParams = {\n\t\t\tApartmentId: this.sessionService.apartmentId,\n\t\t\tLookupTypeId: 183\n\t\t}\n\t\tthis.lookupService.getLookupValueByLookupTypeId(taxListParams).subscribe((res: any) => {\n\t\t\tif (res.length > 0) {\n\t\t\t\tthis.taxPecentageDataList = res;\n\t\t\t}\n    \t});\n\t\t//GL AccountList\n\t\tlet queryParamBase:any = {\n\t\t\tapartmentId: this.sessionService.apartmentId,\n\t\t\tGLAccountTypeId: 165\n\t\t};\n\t\tthis.accountsService.getGlAccountsIdbyGlAccountTypeId(queryParamBase).subscribe((res: any) => {\n\t\t\tif (res.length > 0) {\n\t\t\t\tthis.glAccountList = res;\n\t\t\t}\n   \t\t});\n\t}\n}\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CreateMonthlyInvoiceComponent } from './create-monthly-invoice/create-monthly-invoice.component';\n\nconst routes: Routes = [\n  {path:'', component: CreateMonthlyInvoiceComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class IncomeAutoInvoicesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CondoCardModule } from 'src/app/modules/ui/card/card.module';\nimport { SelectModule } from 'src/app/modules/ui/select/select.module';\nimport { ListModule } from 'src/app/modules/ui/list/list.module';\n\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nimport { IncomeAutoInvoicesRoutingModule } from './income-auto-invoices-routing.module';\nimport { CreateMonthlyInvoiceComponent } from './create-monthly-invoice/create-monthly-invoice.component';\nimport { ViewMonthlyInvoiceComponent } from './view-monthly-invoice/view-monthly-invoice.component';\n\n\n@NgModule({\n  declarations: [CreateMonthlyInvoiceComponent, ViewMonthlyInvoiceComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    CondoCardModule,\n    SelectModule,\n    ListModule,\n    CommonModule,\n    IncomeAutoInvoicesRoutingModule\n  ]\n})\nexport class IncomeAutoInvoicesModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL2luY29tZS10cmFja2VyL2luY29tZS1hdXRvLWludm9pY2VzL3ZpZXctbW9udGhseS1pbnZvaWNlL3ZpZXctbW9udGhseS1pbnZvaWNlLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit, AfterViewInit, ViewChild, HostListener, ViewEncapsulation, ViewContainerRef, TemplateRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\n\nimport { AccountsService } from 'src/app/api/controllers/Accounts';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { ConstantsService } from 'src/app/shared/services/constants.service';\nimport { SessionService } from 'src/app/core/session/session.service';\n\n\nimport * as _ from 'underscore';\nimport * as moment from 'moment';\n\nimport html2canvas from 'html2canvas';\nimport * as jsPDF from 'jspdf'\n\n@Component({\n  selector: 'app-view-monthly-invoice',\n  templateUrl: './view-monthly-invoice.component.html',\n  styleUrls: ['./view-monthly-invoice.component.scss']\n})\nexport class ViewMonthlyInvoiceComponent implements OnInit {\n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent;\n\tinvoiceTable:boolean;\n\tprevInvoiceSearch:string ='';\n\tprevInvoiceDataList:any;\n\tprevTotalItems:number;\n  prevColumnData:any;\n  @ViewChild(\"viewInvoiceDetailsRef\", { static: false }) viewInvoiceDetailsRef: TemplateRef<any>;\n  prevInvoice:any = {};\n  isInvoicePrintLoaded:boolean;\n  apartmentDetails:any;\n\n  constructor(\n    private _overlay: Overlay,\n    private _viewContainerRef: ViewContainerRef,\n    public dialog: MatDialog,\n  \tprivate router: Router,\n    private accountsService:AccountsService,\n    private apartmentService: ApartmentService,\n    private lookupService:LookupService,\n  \tprivate sharedService:SharedService,\n    private constantsService:ConstantsService,\n  \tprivate sessionService:SessionService\n  ) { }\n\n  onGlSearchFilter(event) {\n\t\tif(event != \"\"){\n\t\t\tlet filtergroup = new jqx.filter();\n\t\t\tlet filter_or_operator = 1;\n\t\t\tlet filtervalue = event;\n\t\t\tlet filtercondition = 'contains';\n\t\t\tlet filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n\t\t\tfiltergroup.operator = 'or';\n\t\t\tfiltergroup.addfilter(filter_or_operator, filterData);\n\t\t\tthis.datagrid.showfiltercolumnbackground(false);\n\t\t\tthis.prevColumnData.forEach(item => {\n\t\t\t\tif(item.datafield != 'Actions') {\n\t\t\t\tthis.datagrid.addfilter(item.datafield, filtergroup, true);\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.datagrid.applyfilters();\n\t\t}\n\t\telse {\n\t\t  \tthis.datagrid.clearfilters();\n\t\t}\n  }\n\n  @HostListener('window:onDownloadInvoice', ['$event.detail'])\n  onDownloadInvoice(detail) {\n    let row = this.datagrid.getrowdata(detail.rowId);\n    this.prevInvoice = {};\n    let invoiceParams = {\n      apartmentId: this.sessionService.apartmentId,\n      invoiceId: row.custInvoiceId\n    }\n    this.accountsService.getCustInvoicesByApartmentId(invoiceParams).subscribe((res:any) => {\n      this.prevInvoice = res[0]\n      let params = {\n        apartmentId: this.sessionService.apartmentId,\n        invoiceId: 2\n      }\n      this.isInvoicePrintLoaded = true;\n    })\n    this.dialog.open(this.viewInvoiceDetailsRef, {\n      panelClass: 'material-dialog-big'\n    });\n  }\n\n  getAllInvoicesData(fromDate, toDate){\n    let params = {\n      apartmentId: this.sessionService.apartmentId,\n      InvoiceFromDate: fromDate,\n      InvoiceToDate: toDate\n    }\n  \tthis.accountsService.getCustInvoicesByApartmentIdNew(params).subscribe((res:any) => {\n      var invoiceDataList = res.responseData.value;\n      _.each(invoiceDataList, item => {\n        item.towerUnit = item.apartmentBlockNumber + ' ' + item.apartmentBlockUnitNumber;\n      })\n      this.prevTotalItems = invoiceDataList.length;\n      let tableInfo = {\n        localdata: invoiceDataList,\n        datatype: \"array\"\n      }\n      this.prevInvoiceDataList = new jqx.dataAdapter(tableInfo);\n    })\n  }\n\n  printInvoice(){\n    var data = document.getElementById('InvoiceElement');  \n    html2canvas(data).then(canvas => {  \n      var imgWidth = 208;   \n      var pageHeight = 295;    \n      var imgHeight = canvas.height * imgWidth / canvas.width;  \n      var heightLeft = imgHeight;  \n  \n      const contentDataURL = canvas.toDataURL('image/png')  \n      let pdf = new jsPDF('p', 'mm', 'a4'); // A4 size page of PDF  \n      var position = 0;  \n      pdf.addImage(contentDataURL, 'PNG', 0, position, imgWidth, imgHeight)  \n      pdf.save('invoice.pdf');\n    });  \n  }\n\n  ngOnInit(): void {\n    this.getAllInvoicesData('','');\n    var cellsrenderer = (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n    }\n    var columnrenderer = (value) => {\n      return '<div style=\"padding: 14px\">' + value + '</div>';\n    }\n    this.prevColumnData = [{\n      text: 'Serial No',\n      datafield: 'serialNo',\n      width: 120,\n      pinned: true,\n      cellsrenderer: (row, column, value): string => {\n        return '<div class=\"jqx-custom-inner-cell\"><a href=\"javascript:void(0)\" class=\"mr-2 t-decor\" onClick=\"downloadInvoiceEvent('+ row +')\">'+ value +'</a></div>'\n      },\n      renderer: columnrenderer\n    },{\n        text: 'Posted By',\n        datafield: 'insertedBy_Label',\n        minwidth: 120,\n        cellsrenderer: cellsrenderer,\n        renderer: columnrenderer\n    },{\n        text: 'Tower Unit',\n        datafield: 'block_Unit',\n        minwidth: 120,\n        cellsrenderer: cellsrenderer,\n        renderer: columnrenderer\n    },{\n        text: 'Due',\n        datafield: 'custInvoiceAmount',\n        minwidth: 150,\n        cellsrenderer: cellsrenderer,\n        renderer: columnrenderer\n    },{\n      text: 'Due Date',\n      datafield: 'dueDate',\n      minwidth: 120,\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer\n    }];\n  }\n\n}\n\nlet downloadInvoiceEvent = row => {\n  let event = new CustomEvent('onDownloadInvoice', {\n    detail: {\n        rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).downloadInvoiceEvent = downloadInvoiceEvent;\n"]}
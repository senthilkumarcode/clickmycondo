{"version":3,"sources":["./node_modules/ngx-cookie-service/__ivy_ngcc__/fesm2015/ngx-cookie-service.js","./src/@condo/directives/scrollbar/index.ts","./src/@condo/pipes/find-by-key/find-by-key.module.ts","./src/@condo/pipes/find-by-key/find-by-key.pipe.ts","./src/@condo/pipes/find-by-key/index.ts","./src/@condo/pipes/find-by-key/public-api.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACkE;AAChD;;AAEtB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yEAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,wDAAwD,KAAK;AAC7D;AACA;AACA;AACA,oCAAoC;AACpC;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE,UAAU;AAC9D,oDAAoD,kCAAkC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,sDAAe,CAAC,wDAAQ,GAAG,sDAAe,CAAC,yDAAW,GAAG;AAClJ;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,4DAAc,gBAAgB,OAAO,oDAAM,SAAS,yDAAW,IAAI;AAC/E;AACA,sBAAsB,wEAAkB,EAAE,4CAA4C,0BAA0B,8DAAQ,CAAC,wDAAQ,GAAG,8DAAQ,CAAC,yDAAW,GAAG,EAAE,4CAA4C;AACzM,gBAAgB,wDAAU,GAAG,qDAAO,IAAI,4DAAM,CAAC,wDAAQ;AACvD,IAAI,qDAAO,IAAI,4DAAM,CAAC,yDAAW;AACjC;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,4DAAqB;AAC/C,sBAAsB,oDAAM;AAC5B,uBAAuB,yDAAW;AAClC,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;;AAEyB;;AAEzB,8C;;;;;;;;;;;;ACnLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;;;;;;;;;;;;;;;;;;;ACAlB;AAC0C;IAUtE,wBAAwB,SAAxB,wBAAwB;CAEpC;AAFY,wBAAwB;IARpC,8DAAQ,CAAC;QACN,YAAY,EAAE;YACV,+FAAkB;SACrB;QACD,OAAO,EAAO;YACV,+FAAkB;SACrB;KACJ,CAAC;GACW,wBAAwB,CAEpC;AAFoC;;;;;;;;;;;;;;;;;;ACXe;AAEpD;;GAEG;IAKU,kBAAkB,SAAlB,kBAAkB;IAE3B;;OAEG;IACH;IAEA,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,KAAwB,EAAE,GAAW,EAAE,MAAa;QAE1D,+CAA+C;QAC/C,IAAK,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EACzB;YACI,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACtB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;SACN;QAED,8BAA8B;QAC9B,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC;IAChE,CAAC;CACJ;;AA7BY,kBAAkB;IAJ9B,0DAAI,CAAC;QACF,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,KAAK;KACd,CAAC;;GACW,kBAAkB,CA6B9B;AA7B8B;;;;;;;;;;;;;ACT/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;;;;;;;;;;;;;ACAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;AACE","file":"common-es2015.js","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Inject, InjectionToken, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, Injectable } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nlet CookieService = class CookieService {\n    constructor(\n    // The type `Document` may not be used here. Although a fix is on its way,\n    // we will go with `any` for now to support Angular 2.4.x projects.\n    // Issue: https://github.com/angular/angular/issues/12631\n    // Fix: https://github.com/angular/angular/pull/14894\n    document, \n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    check(name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        const regExp = this.getCookieRegExp(name);\n        const exists = regExp.test(this.document.cookie);\n        return exists;\n    }\n    /**\n     * @param name Cookie name\n     * @returns property value\n     */\n    get(name) {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n            const regExp = this.getCookieRegExp(name);\n            const result = regExp.exec(this.document.cookie);\n            return this.safeDecodeURIComponent(result[1]);\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * @returns all the cookies in json\n     */\n    getAll() {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        const cookies = {};\n        const document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = this.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    }\n    /**\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param expires  Number of days until the cookies expires or an actual `Date`\n     * @param path     Cookie path\n     * @param domain   Cookie domain\n     * @param secure   Secure flag\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\n     */\n    set(name, value, expires, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        if (expires) {\n            if (typeof expires === 'number') {\n                const dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + expires.toUTCString() + ';';\n            }\n        }\n        if (path) {\n            cookieString += 'path=' + path + ';';\n        }\n        if (domain) {\n            cookieString += 'domain=' + domain + ';';\n        }\n        if (secure === false && sameSite === 'None') {\n            secure = true;\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n        }\n        if (secure) {\n            cookieString += 'secure;';\n        }\n        cookieString += 'sameSite=' + sameSite + ';';\n        this.document.cookie = cookieString;\n    }\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, secure, sameSite);\n    }\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const cookies = this.getAll();\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n    /**\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    getCookieRegExp(name) {\n        const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n    safeDecodeURIComponent(encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch (_a) {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n};\nCookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID)); };\nCookieService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: InjectionToken, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nCookieService.ɵprov = ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID)); }, token: CookieService, providedIn: \"root\" });\nCookieService = __decorate([ __param(0, Inject(DOCUMENT)),\n    __param(1, Inject(PLATFORM_ID))\n], CookieService);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.InjectionToken, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n//# sourceMappingURL=ngx-cookie-service.js.map","export * from 'src/@condo/directives/scrollbar/public-api';\n","import { NgModule } from '@angular/core';\nimport { CondoFindByKeyPipe } from 'src/@condo/pipes/find-by-key/find-by-key.pipe';\n\n@NgModule({\n    declarations: [\n        CondoFindByKeyPipe\n    ],\n    exports     : [\n        CondoFindByKeyPipe\n    ]\n})\nexport class CondoFindByKeyPipeModule\n{\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Finds an object from given source using the given key - value pairs\n */\n@Pipe({\n    name: 'condoFindByKey',\n    pure: false\n})\nexport class CondoFindByKeyPipe implements PipeTransform\n{\n    /**\n     * Constructor\n     */\n    constructor()\n    {\n    }\n\n    /**\n     * Transform\n     *\n     * @param value A string or an array of strings to find from source\n     * @param key Key of the object property to look for\n     * @param source Array of objects to find from\n     */\n    transform(value: string | string[], key: string, source: any[]): any\n    {\n        // If the given value is an array of strings...\n        if ( Array.isArray(value) )\n        {\n            return value.map((item) => {\n                return source.find((sourceItem) => sourceItem[key] === item);\n            });\n        }\n\n        // If the value is a string...\n        return source.find(sourceItem => sourceItem[key] === value);\n    }\n}\n","export * from 'src/@condo/pipes/find-by-key/public-api';\n","export * from 'src/@condo/pipes/find-by-key/find-by-key.pipe';\nexport * from 'src/@condo/pipes/find-by-key/find-by-key.module';\n"],"sourceRoot":"webpack:///"}
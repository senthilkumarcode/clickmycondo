{"version":3,"sources":["webpack:///src/app/modules/ams/roles-and-permissions/add-role/add-role.component.html","webpack:///src/app/modules/ams/roles-and-permissions/configure-roles/configure-roles.component.html","webpack:///src/app/modules/ams/roles-and-permissions/role-type-list/role-type-list.component.html","webpack:///src/app/modules/ams/roles-and-permissions/roles-and-permissions-list/roles-and-permissions-list.component.html","webpack:///src/app/modules/ams/roles-and-permissions/set-permissions/set-permissions.component.html","webpack:///src/app/modules/ams/roles-and-permissions/add-role/add-role.component.scss","webpack:///src/app/modules/ams/roles-and-permissions/add-role/add-role.component.ts","webpack:///src/app/modules/ams/roles-and-permissions/configure-roles/configure-roles.component.scss","webpack:///src/app/modules/ams/roles-and-permissions/configure-roles/configure-roles.component.ts","webpack:///src/app/modules/ams/roles-and-permissions/role-type-list/role-type-list.component.scss","webpack:///src/app/modules/ams/roles-and-permissions/role-type-list/role-type-list.component.ts","webpack:///src/app/modules/ams/roles-and-permissions/roles-and-permissions-list/roles-and-permissions-list.component.scss","webpack:///src/app/modules/ams/roles-and-permissions/roles-and-permissions-list/roles-and-permissions-list.component.ts","webpack:///src/app/modules/ams/roles-and-permissions/roles-and-permissions-routing.module.ts","webpack:///src/app/modules/ams/roles-and-permissions/roles-and-permissions.module.ts","webpack:///src/app/modules/ams/roles-and-permissions/set-permissions/set-permissions.component.scss","webpack:///src/app/modules/ams/roles-and-permissions/set-permissions/set-permissions.component.ts"],"names":["AddRoleComponent","userService","router","activatedRoute","sessionService","sharedService","_changeDetectorRef","screenService","allRoles","isCreate","message","params","id","undefined","roleId","getRole","getAllRoles","queryParamBase","getRoleByRoleId","subscribe","resp","menuRole","roleTypeId","roleName","description","getAllRoleTypes","length","filter","key","value","splice","indexOf","form","valid","window","scroll","top","behavior","appearance","content","shake","showIcon","type","markForCheck","addRoleParam","apartmentId","userId","toISOString","roleParam","role","addRole","openSnackBar","selector","template","encapsulation","None","animations","ConfigureRolesComponent","roleList","event","getRoleList","paramsRoles","RoleTypeId","ApartmentId","getAllRolesByRoleTypeIdByApartmentId","res","addMenuLevelParam","secLevelParam","seclevel","addMenuSecLevel","addMenuRoleSecLevel","roleSecLevelParam","roleseclevel","navigate","updataParam","menuRoleSecLevelId","updateRoleParam","menuSecLevel","updateMenuSecLevel","getMenuRoleSecLevelbyRoleSecLevelId","Array","isArray","data","RoleTypeListComponent","injector","roleHeader","isEnableCreate","isShowRoleList","roleTypeSearch","modalService","get","detail","dataRecord","datagrid","getrowdata","rowId","navigateByUrl","cellsrenderer","row","column","columnrenderer","text","datafield","renderer","minwidth","cellsalign","align","width","getRolePermissionList","param","refMenuData","isActive","gridSourceData","localdata","datatype","roleTypeList","jqx","dataAdapter","filtergroup","filter_or_operator","filtervalue","filtercondition","filterData","createfilter","operator","addfilter","showfiltercolumnbackground","forEach","item","applyfilters","clearfilters","onEditRole","CustomEvent","dispatchEvent","RolesAndPermissionsListComponent","roleSearch","queryParams","secLevelId","showConfirmModal","apiSubscribe","unitlistdeleteindexcast","deleteBy","parseInt","deleteMenuRoleSecLevel","error","console","log","unsubscribe","getAllDefaultMenuRoleSecLevelbyApartmentId","navigateToPermission","onDeleteRole","routes","path","redirectTo","pathMatch","component","RolesAndPermissionsRouting","imports","forChild","exports","RolesAndPermissionsModule","declarations","SetPermissionsComponent","menuList","isDataLoaded","getScreenList","actionList","name","functionId","checked","RoleId","getMenuFunctionByRoleIdMultiFilter","responseData","selectedMenuName","menuName","changeMenu","option","subMenuList","subMenuNames","selectedSubMenuName","subMenuName","changeSubMenu","actions","mapActions","add_FunctionId","edit_FunctionId","display_FunctionId","delete_FunctionId","add","edit","display","menuSecLevelFunctionId","updatedBy","updateMenuSecLevelFunctionMapping"],"mappings":"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","file":"modules-ams-roles-and-permissions-roles-and-permissions-module-es5.js","sourcesContent":["export default \"<div class=\\\"parking-create-parking-slot-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<condo-message class=\\\"mb-3\\\" *ngIf=\\\"message\\\"\\n\\t\\t\\t\\t[appearance]=\\\"message.appearance\\\"\\n\\t\\t\\t\\t[showIcon]=\\\"message.showIcon\\\"\\n\\t\\t\\t\\t[type]=\\\"message.type\\\"\\n\\t\\t\\t\\t[@shake]=\\\"message.shake\\\">\\n\\t\\t\\t\\t{{message.content}}\\n\\t\\t</condo-message>\\n\\t\\t<form #rolesForm=\\\"ngForm\\\" name=\\\"addSlotForm\\\" novalidate>\\n\\t\\t\\t<condo-card>\\n\\t\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex\\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Create Roles</h4>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t\\t<div class=\\\"p-5\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"select-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Roles Type*</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<select name=\\\"roleTypeId\\\" [(ngModel)]=\\\"roleTypeId\\\" class=\\\"form-control\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let item of allRoles\\\" value=\\\"{{item.value}}\\\">{{item?.name}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</option>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Roles Name*</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"roleName\\\" [(ngModel)]=\\\"roleName\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"select-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Description</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<textarea name=\\\"description\\\" [(ngModel)]=\\\"description\\\" cols=\\\"10\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trows=\\\"3\\\"></textarea>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12 d-flex justify-content-end\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"mr-3\\\" mat-flat-button\\n\\t\\t\\t\\t\\t\\t\\t\\trouterLink=\\\"/ams/roles-permissions/roles-type-list\\\" routerLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t[routerLinkActiveOptions]=\\\"{exact:true}\\\">Cancel</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" *ngIf=\\\"isCreate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"addRole()\\\">Submit</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<!-- <button mat-flat-button [color]=\\\"'primary'\\\" *ngIf=\\\"!isCreate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"updateRole()\\\">Update</button> -->\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</condo-card>\\n\\t\\t</form>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"parking-create-parking-slot-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<form #rolesForm=\\\"ngForm\\\" name=\\\"addSlotForm\\\" novalidate>\\n\\t\\t\\t<condo-message class=\\\"mb-3\\\" *ngIf=\\\"message\\\"\\n\\t\\t\\t\\t[appearance]=\\\"message.appearance\\\"\\n\\t\\t\\t\\t[showIcon]=\\\"message.showIcon\\\"\\n\\t\\t\\t\\t[type]=\\\"message.type\\\"\\n\\t\\t\\t\\t[@shake]=\\\"message.shake\\\">\\n\\t\\t\\t\\t{{message.content}}\\n\\t\\t\\t</condo-message>\\n\\t\\t\\t<condo-card>\\n\\t\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex\\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Create Menu Control</h4>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t\\t<div class=\\\"p-5\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Role Type\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select Role Type\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"allRoles\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"name\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"roleTypeId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"value\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setRoleType($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\" *ngIf=\\\"roleTypeId\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<condo-select \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"{{roleTypeId == 1 ? 'Admin' : 'Staff'}} Role\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldPlaceholder=\\\"Select {{roleTypeId == 1 ? 'Admin' : 'Staff'}} Role\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldList]=\\\"roleList\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldValue=\\\"roleName\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"roleId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldId=\\\"roleId\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"setRole($event)\\\" \\n\\t\\t\\t\\t\\t\\t\\t\\t></condo-select>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"input-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Menu Control Name*</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"roleName\\\" [(ngModel)]=\\\"roleName\\\" required>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"select-box\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Description</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<textarea name=\\\"description\\\" [(ngModel)]=\\\"description\\\" cols=\\\"10\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trows=\\\"3\\\"></textarea>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12 d-flex justify-content-end\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<button class=\\\"mr-3\\\" mat-flat-button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trouterLink=\\\"/ams/roles-permissions/role-permissions-list\\\" routerLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[routerLinkActiveOptions]=\\\"{exact:true}\\\">Cancel</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" *ngIf=\\\"isCreate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"addRole()\\\">Submit</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" *ngIf=\\\"!isCreate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(click)=\\\"updateRole()\\\">Update</button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</condo-card>\\n\\t\\t</form>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"parking-aa-unit-to-unit-allocation-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<app-loader *ngIf=\\\"!isShowRoleList\\\"></app-loader>\\n\\t\\t<condo-card *ngIf=\\\"isShowRoleList\\\">\\n\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t<div class=\\\"d-flex\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex align-items-center\\\">\\n\\t\\t\\t\\t\\t\\t<h4>Roles for Staff & Admin</h4>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"ml-auto d-none d-md-block mr-3\\\">\\n\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"roleTypeSearch\\\"\\n\\t\\t\\t\\t\\t\\t(ngModelChange)=\\\"onGlSearchFilter()\\\">\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"mr-3\\\">\\n\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" href=\\\"javascript:void(0)\\\"\\n\\t\\t\\t\\t\\trouterLink=\\\"/ams/roles-permissions/role-type\\\" routerLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t[routerLinkActiveOptions]=\\\"{exact:true}\\\">Create Role</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t<jqxGrid [theme]=\\\"'material'\\\" [width]=\\\"'100%'\\\" [rowsheight]=\\\"48\\\" [autoheight]=\\\"true\\\" [pageable]=\\\"true\\\"\\n\\t\\t\\t\\t\\t[filterable]=\\\"true\\\" [sortable]=\\\"true\\\" [source]=\\\"roleTypeList\\\" [columns]=\\\"roleHeader\\\"\\n\\t\\t\\t\\t\\t[columnsresize]=\\\"true\\\" [enablehover]=\\\"false\\\" #datagrid>\\n\\t\\t\\t\\t</jqxGrid>\\n\\t\\t\\t</div>\\n\\t\\t</condo-card>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"parking-aa-unit-to-unit-allocation-wrapper\\\">\\n\\t<div class=\\\"main\\\">\\n\\t\\t<app-loader *ngIf=\\\"!isShowRoleList\\\"></app-loader>\\n\\t\\t<condo-card *ngIf=\\\"isShowRoleList\\\">\\n\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t<div class=\\\"d-flex\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"d-flex align-items-center\\\">\\n\\t\\t\\t\\t\\t\\t<h4>Roles And Permissions</h4>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"ml-auto d-none d-md-block mr-3\\\">\\n\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\" [(ngModel)]=\\\"roleSearch\\\"\\n\\t\\t\\t\\t\\t\\t(ngModelChange)=\\\"onGlSearchFilter()\\\">\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"mr-3\\\">\\n\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" href=\\\"javascript:void(0)\\\"\\n\\t\\t\\t\\t\\t\\t\\trouterLink=\\\"/ams/roles-permissions/configure-roles\\\" routerLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t\\t\\t[routerLinkActiveOptions]=\\\"{exact:true}\\\">Add Menu Control</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t<jqxGrid [theme]=\\\"'material'\\\" [width]=\\\"'100%'\\\" [rowsheight]=\\\"48\\\" [autoheight]=\\\"true\\\" [pageable]=\\\"true\\\"\\n\\t\\t\\t\\t\\t[filterable]=\\\"true\\\" [sortable]=\\\"true\\\" [source]=\\\"roleList\\\" [columns]=\\\"roleHeader\\\"\\n\\t\\t\\t\\t\\t[columnsresize]=\\\"true\\\" [enablehover]=\\\"false\\\" #datagrid>\\n\\t\\t\\t\\t</jqxGrid>\\n\\t\\t\\t</div>\\n\\t\\t</condo-card>\\n\\t</div>\\n</div>\";","export default \"<div class=\\\"parking-create-parking-slot-wrapper\\\">\\n    <div class=\\\"main\\\">\\n        <condo-card>\\n            <div CondoCardHeader>\\n                <div class=\\\"d-flex\\\">\\n                    <div>\\n                        <h4>Set Permissions</h4>\\n                        <p>{{menuList.length}} results</p>\\n                    </div>\\n                    <div class=\\\"ml-auto d-none d-md-block mr-3\\\">\\n                        <button mat-flat-button \\n                        routerLink=\\\"/ams/roles-permissions/role-permissions-list\\\" \\n\\t\\t\\t\\t\\t\\trouterLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t\\t[routerLinkActiveOptions] = \\\"{exact:true}\\\">Back to Role List</button>\\n                    </div>\\n                </div>\\n            </div>\\n            <div CondoCardBody>\\n                <app-loader *ngIf=\\\"!isDataLoaded\\\" ></app-loader>\\n                <div class=\\\"p-5\\\" *ngIf=\\\"isDataLoaded\\\" > \\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-4 col-lg-4 col-sm-6 col-xs-6\\\">\\n                            <mat-selection-list #menu [multiple]=\\\"false\\\" (selectionChange)=\\\"changeMenu($event)\\\">\\n                                <mat-list-option *ngFor=\\\"let item of menuList;let i=index\\\" [value]=\\\"item\\\"\\n                                    [selected]=\\\"item.menuName === selectedMenuName\\\">\\n                                    <!-- <div class=\\\"form-check recur-check float-left\\\">\\n                                        <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"{{item}}\\\" name=\\\"{{item}}\\\" checked>\\n                                        <label class=\\\"form-check-label tiny\\\" for=\\\"{{item}}\\\">{{item}}</label>\\n                                    </div> -->\\n                                    {{item?.menuName}}\\n                                </mat-list-option>\\n                            </mat-selection-list>\\n                        </div>\\n                        <div class=\\\"col-md-4 col-lg-4 col-sm-6 col-xs-6\\\">\\n                            <mat-selection-list #submenu [multiple]=\\\"false\\\" (selectionChange)=\\\"changeSubMenu($event)\\\">\\n                                <mat-list-option *ngFor=\\\"let item of subMenuList\\\" [value]=\\\"item\\\"\\n                                    [selected]=\\\"item.subMenuName === selectedSubMenuName\\\">\\n                                    <!-- <div class=\\\"form-check recur-check float-left\\\">\\n                                        <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"{{item}}\\\" name=\\\"{{item}}\\\">\\n                                        <label class=\\\"form-check-label tiny\\\" for=\\\"{{item}}\\\">{{item}}</label>\\n                                    </div> -->\\n                                    {{item?.subMenuName}}\\n                                </mat-list-option>\\n                            </mat-selection-list>\\n                        </div>\\n                        <div class=\\\"col-md-4 col-lg-4 col-sm-6 col-xs-6\\\" *ngIf=\\\"actionList && actionList.length\\\">\\n                            <mat-selection-list #menuActions (selectionChange)=\\\"changeActions($event)\\\">\\n                                <mat-list-option *ngFor=\\\"let item of actionList\\\" [selected]=\\\"item.checked\\\"\\n                                    [value]=\\\"item\\\">\\n                                    {{item?.name | uppercase}}\\n                                </mat-list-option>\\n                            </mat-selection-list>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </condo-card>\\n    </div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3JvbGVzLWFuZC1wZXJtaXNzaW9ucy9hZGQtcm9sZS9hZGQtcm9sZS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, ViewChild, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';\nimport { UserService } from 'src/app/api/controllers/User';\nimport { ScreenService } from 'src/app/api/controllers/Screen';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { CondoAnimations } from 'src/@condo/animations';\n\n@Component({\n  selector: 'app-add-role',\n  templateUrl: './add-role.component.html',\n  styleUrls: ['./add-role.component.scss'],\n  encapsulation  : ViewEncapsulation.None,\n  animations   : CondoAnimations\n})\nexport class AddRoleComponent implements OnInit {\n  @ViewChild('rolesForm') form:any;\n  allRoles: Array<any> = [];\n  roleTypeId: any;\n  roleName: any;\n  description: any;\n  roleId:any;\n  isCreate:boolean=true;\n  menuRole:any;\n  message:any = null;\n  constructor(private userService: UserService,\n    private router: Router,\n    private activatedRoute : ActivatedRoute,\n    private sessionService : SessionService,\n    private sharedService : SharedService,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private screenService: ScreenService) { }\n\n  ngOnInit(): void {\n    if (this.activatedRoute.params['value'].id != undefined) {\n      this.roleId = this.activatedRoute.params['value'].id;\n      this.isCreate = false;\n      this.getRole();\n    }\n    this.getAllRoles();\n  }\n\n  getRole(){\n      let queryParamBase = {\n      roleId: this.roleId,\n    };\n    this.userService.getRoleByRoleId(queryParamBase).subscribe(\n      resp =>{\n        this.menuRole = resp[0];\n        this.roleTypeId = this.menuRole.roleId;\n        this.roleName = this.menuRole.roleName;\n        this.description = this.menuRole.description;\n      }\n    )\n  }\n\n  getAllRoles() {\n    this.userService.getAllRoleTypes().subscribe(\n      (resp: any) => {\n        this.allRoles = resp;\n        if (this.allRoles && this.allRoles.length) {\n          this.allRoles.filter(key => {\n            if (key.value == 2 || key.value == 4 || key.value == 5) {\n              this.allRoles.splice(this.allRoles.indexOf(key), 1);\n            }\n          })\n        }\n      }\n    )\n  }\n\n  addRole() {\n    this.message = null;\n    if(!this.form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n      //Mark for check\n      this._changeDetectorRef.markForCheck();\n    } else {\n      let addRoleParam = {\n        \"roleId\": 0,\n        \"apartmentId\": this.sessionService.apartmentId,\n        \"roleName\": this.roleName,\n        \"description\": this.description,\n        \"isActive\": true,\n        \"insertedBy\": this.sessionService.userId,\n        \"insertedOn\": _moment().toISOString(),\n        \"updatedBy\": this.sessionService.userId,\n        \"updatedOn\": \"2020-08-09T06:22:21.539Z\",\n        \"roleTypeId\": this.roleTypeId\n      }\n      let roleParam = {\n        role: addRoleParam\n      }\n      this.userService.addRole(roleParam).subscribe(resp => {\n        this.sharedService.openSnackBar('Role Added Successfully','success');\n        this.roleTypeId = null;\n        this.roleName = '';\n        this.description = '';\n      })\n    }\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3JvbGVzLWFuZC1wZXJtaXNzaW9ucy9jb25maWd1cmUtcm9sZXMvY29uZmlndXJlLXJvbGVzLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit, ChangeDetectorRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ScreenService } from 'src/app/api/controllers/Screen';\nimport { UserService } from 'src/app/api/controllers/User';\nimport { SessionService } from 'src/app/core/session/session.service';\n\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { CondoAnimations } from 'src/@condo/animations';\n\n@Component({\n  selector: 'app-configure-roles',\n  templateUrl: './configure-roles.component.html',\n  styleUrls: ['./configure-roles.component.scss'],\n  encapsulation  : ViewEncapsulation.None,\n  animations   : CondoAnimations\n})\nexport class ConfigureRolesComponent implements OnInit {\n  @ViewChild('rolesForm') form:any;\n  allRoles: Array<any> = [];\n  roleList:any = [];\n  roleTypeId: number;\n  roleId:number;\n  roleName: any;\n  description: any;\n  menuRoleSecLevelId:any;\n  isCreate:boolean=true;\n  menuRole:any;\n  message:any = null;\n  constructor(private userService: UserService,\n    private router: Router,\n    private activatedRoute : ActivatedRoute,\n    private sessionService : SessionService,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private screenService: ScreenService) { }\n\n  setRoleType(event) {\n    this.roleId = null;\n    this.roleTypeId = event[0].value;\n    this.getRoleList();\n  }\n\n  getRoleList() {\n    //Admin Role Type\n    var paramsRoles = {\n      RoleTypeId: this.roleTypeId,\n      ApartmentId: this.sessionService.apartmentId\n    }\n    this.userService.getAllRolesByRoleTypeIdByApartmentId(paramsRoles).subscribe((res: any) => {\n      this.roleList = res;\n    });\n  }\n\n  setRole(event) {\n    this.roleId = event[0].roleId;\n  }\n\n  addRole() {\n    this.message = null;\n    if(!this.form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n      //Mark for check\n      this._changeDetectorRef.markForCheck();\n    } else {\n      let addMenuLevelParam = {\n        \"menuSecLevelId\": 0,\n        \"apartmentId\": this.sessionService.apartmentId,\n        \"name\": this.roleName,\n        \"isActive\": true,\n        \"insertedBy\": this.sessionService.userId,\n        \"insertedOn\": _moment().toISOString(),\n        \"updatedBy\": null,\n        \"updatedOn\": null\n      }\n      let secLevelParam = {\n        seclevel: addMenuLevelParam\n      }\n      this.screenService.addMenuSecLevel(secLevelParam).subscribe((resp:any) => {\n        if (resp && resp.message) {\n          let addMenuRoleSecLevel = {\n            \"menuRoleSecLevelId\": 0,\n            \"apartmentId\": this.sessionService.apartmentId,\n            \"roleId\": this.roleId,\n            \"secLevelId\": resp.message,\n            \"isActive\": true,\n            \"insertedBy\": this.sessionService.userId,\n            \"insertedOn\": _moment().toISOString(),\n            \"updatedBy\": null,\n            \"updatedOn\": null\n          }\n          let roleSecLevelParam = {\n            roleseclevel: addMenuRoleSecLevel\n          }\n          this.screenService.addMenuRoleSecLevel(roleSecLevelParam).subscribe(resp => {\n            this.router.navigate(['/ams/roles-permissions/role-permissions-list']);\n          })\n        }\n      })\n    }\n  }\n\n  updateRole(){\n    this.message = null;\n    if(!this.form.valid){\n      window.scroll({\n        top: 0,\n        behavior: 'smooth'\n      });\n      // Show the validation message\n      this.message = {\n        appearance: 'outline',\n        content   : \"Fill the Required Fields\",\n        shake     : true,\n        showIcon  : true,\n        type      : 'error'\n      };\n      //Mark for check\n      this._changeDetectorRef.markForCheck();\n    } else {\n      let updataParam = {\n        \"menuSecLevelId\": this.menuRole.menuRoleSecLevelId,\n        \"apartmentId\":  this.sessionService.apartmentId,\n        \"name\": this.roleName,\n        \"isActive\": true,\n        \"insertedBy\": 0,\n        \"insertedOn\": _moment().toISOString(),\n        \"updatedBy\": this.sessionService.userId,\n        \"updatedOn\": _moment().toISOString()\n      }\n      let updateRoleParam = {\n        menuSecLevel : updataParam\n      }\n      this.screenService.updateMenuSecLevel(updateRoleParam).subscribe(resp =>{\n        this.router.navigate(['/ams/roles-permissions/role-permissions-list']);\n      })\n    }\n  }\n\n  ngOnInit(): void {\n    if (this.activatedRoute.params['value'].id != undefined) {\n      this.menuRoleSecLevelId = this.activatedRoute.params['value'].id;\n      this.isCreate = false;\n      let queryParamBase = {\n        apartmentId: this.sessionService.apartmentId,\n        menuRoleSecLevelId: this.menuRoleSecLevelId,\n      };\n      this.screenService.getMenuRoleSecLevelbyRoleSecLevelId(queryParamBase).subscribe(resp =>{\n        this.menuRole = resp[0];\n        this.roleId = this.menuRole.roleId;\n        this.roleName = this.menuRole.roleName;\n      })\n    }\n    this.userService.getAllRoleTypes().subscribe((resp: any) => {\n      if(Array.isArray(resp)) {\n        this.allRoles = resp.filter(data => {\n          if (data.value == 1 || data.value == 3) {\n            return data;\n          }\n        })\n      }\n    })\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3JvbGVzLWFuZC1wZXJtaXNzaW9ucy9yb2xlLXR5cGUtbGlzdC9yb2xlLXR5cGUtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import { HostListener, Injector, ViewChild } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ScreenService } from 'src/app/api/controllers/Screen';\nimport { UserService } from 'src/app/api/controllers/User';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\n\n@Component({\n  selector: 'app-role-type-list',\n  templateUrl: './role-type-list.component.html',\n  styleUrls: ['./role-type-list.component.scss']\n})\nexport class RoleTypeListComponent implements OnInit {\n\n  public roleHeader: Array<any> = [];\n  public roleTypeList: any;\n  public isEnableCreate: boolean = true;\n  modalService: any;\n  isShowRoleList:boolean=false;\n  roleTypeSearch='';\n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent;\n  @HostListener('window:onEditRole', ['$event.detail'])\n  onEditRole(detail) {\n    let dataRecord = this.datagrid.getrowdata(detail.rowId);\n    let roleId = dataRecord.roleId;\n    this.router.navigateByUrl('/ams/roles-permissions/edit-role-type/' + roleId);\n  }\n  constructor(private router: Router,\n    private userService: UserService,\n    private sharedService: SharedService,\n    private sessionService: SessionService,\n    private injector: Injector) {\n    this.modalService = this.injector.get(ModalService);\n  }\n\n  ngOnInit(): void {\n    var cellsrenderer = (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n    }\n    var columnrenderer = (value) => {\n      return '<div style=\"padding: 14px\">' + value + '</div>';\n    }\n    this.roleHeader = [{\n        text: 'Role Type',\n        datafield: 'roleTypeName',\n        cellsrenderer: cellsrenderer,\n        renderer: columnrenderer,\n        minwidth: 120\n      },{\n        text: 'role name',\n        datafield: 'roleName',\n        cellsrenderer: cellsrenderer,\n        renderer: columnrenderer,\n        minwidth: 120\n      }, {\n        text: 'description',\n        datafield: 'description',\n        cellsrenderer: cellsrenderer,\n        renderer: columnrenderer,\n        minwidth: 120\n      },{\n        text: 'action',\n        cellsalign: 'center',\n        align: 'center',\n        width: 120,\n        cellsrenderer: (row): string => {\n          return '<div class=\"simple-actions\"><a href=\"javascript:void(0)\" class=\"mr-2\" onClick=\"onEditRole(' + row + ')\"><i class=\"fa fa-pencil icon edit\" aria-hidden=\"true\"></i></a></div>'\n        },\n        renderer: columnrenderer\n    }];\n    this.getRolePermissionList();\n  }\n  getRolePermissionList() {\n    this.isShowRoleList = false;\n    let param = {\n      ApartmentId: this.sessionService.apartmentId\n    }\n    this.userService.getAllRoles(param).subscribe(\n      (resp: any) => {\n        let refMenuData = resp.filter(data => {\n          return data.isActive\n        });\n        let gridSourceData = {\n          localdata: refMenuData,\n          datatype: \"array\"\n\n        }\n        this.roleTypeList = new jqx.dataAdapter(gridSourceData);\n        this.isShowRoleList = true;\n        this.isEnableCreate = true;\n      }\n    )\n  }\n\n    \n  onGlSearchFilter() {\n\n    if(this.roleTypeSearch != \"\"){\n\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = this.roleTypeSearch;\n      let filtercondition = 'contains';\n      let filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.operator = 'or';\n      filtergroup.addfilter(filter_or_operator, filterData);\n\n      this.datagrid.showfiltercolumnbackground(false);\n\n      this.roleHeader.forEach(item => {\n        if(item.datafield != 'Actions') {\n          this.datagrid.addfilter(item.datafield, filtergroup, true);\n        }\n      })\n\n      this.datagrid.applyfilters();\n      \n    }\n    else {\n      this.datagrid.clearfilters();\n    }\n\n  }\n\n}\n\nfunction onEditRole(row) {\n  var event = new CustomEvent('onEditRole', {\n    detail: {\n      rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).onEditRole = onEditRole;\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3JvbGVzLWFuZC1wZXJtaXNzaW9ucy9yb2xlcy1hbmQtcGVybWlzc2lvbnMtbGlzdC9yb2xlcy1hbmQtcGVybWlzc2lvbnMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, ViewChild, HostListener, Injector } from '@angular/core';\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ScreenService } from 'src/app/api/controllers/Screen';\nimport { ModalService } from 'src/app/shared/services/modal.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-roles-and-permissions-list',\n  templateUrl: './roles-and-permissions-list.component.html',\n  styleUrls: ['./roles-and-permissions-list.component.scss']\n})\nexport class RolesAndPermissionsListComponent implements OnInit {\n\n  public roleHeader: Array<any> = [];\n  public roleList: any;\n  public isEnableCreate: boolean = true;\n  modalService: any;\n  isShowRoleList:boolean=false;\n  roleSearch='';\n  @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent;\n  apiSubscribe:Subscription;\n  @HostListener('window:navigateToPermission',['$event.detail'])\n  navigateToPermission(detail) {\n    let dataRecord = this.datagrid.getrowdata(detail.rowId)\n    this.router.navigate(['/ams/roles-permissions/set-permission'],{queryParams:{ secLevelId: dataRecord.secLevelId, roleId: dataRecord.roleId}});\n  }\n  @HostListener('window:onEditRole', ['$event.detail'])\n  onEditRole(detail) {\n    let dataRecord = this.datagrid.getrowdata(detail.rowId);\n    let menuRoleSecLevelId = dataRecord.menuRoleSecLevelId;\n    this.router.navigateByUrl('/ams/roles-permissions/edit-configure-roles/' + menuRoleSecLevelId);\n  }\n  @HostListener('window:onDeleteRole', ['$event.detail'])\n  onDeleteRole(detail) {\n    let dataRecord = this.datagrid.getrowdata(detail.rowId)\n    let menuRoleSecLevelId = dataRecord.menuRoleSecLevelId\n    this.modalService.showConfirmModal(menuRoleSecLevelId);\n  }\n  constructor(private router: Router,\n    private screenService: ScreenService,\n    private sharedService: SharedService,\n    private sessionService: SessionService,\n    private injector: Injector) {\n    this.modalService = this.injector.get(ModalService);\n  }\n\n  ngOnInit(): void {\n    var cellsrenderer = (row, column, value) => {\n      return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n    }\n    var columnrenderer = (value) => {\n      return '<div style=\"padding: 14px\">' + value + '</div>';\n    }\n    this.roleHeader = [{\n      text: 'role name',\n      datafield: 'roleName',\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer,\n      minwidth: 120\n    }, {\n      text: 'menu control name',\n      datafield: 'secLevelName',\n      cellsrenderer: cellsrenderer,\n      renderer: columnrenderer,\n      minwidth: 120\n    }, {\n      text: 'set permission',\n      cellsalign: 'center',\n      align: 'center',\n      width: 200,\n      cellsrenderer: (row): string => {\n        return '<div class=\"simple-actions\"><a href=\"javascript:void(0)\" onClick=\"navigateToPermission(' + row + ')\" class=\"btn mat-primary\">Set Permissions</a></div>'\n      },\n      renderer: columnrenderer\n    },\n    {\n      text: 'action',\n      cellsalign: 'center',\n      align: 'center',\n      width: 120,\n      cellsrenderer: (row): string => {\n        return '<div class=\"simple-actions\"><a href=\"javascript:void(0)\" class=\"mr-2\" onClick=\"onEditRole(' + row + ')\"><i class=\"fa fa-pencil icon edit\" aria-hidden=\"true\"></i></a><a href=\"javascript:void(0)\" class=\"mr-2\" onClick=\"onDeleteRole(' + row + ')\"><i class=\"fa fa-trash icon delete\" aria-hidden=\"true\"></i></a></div>'\n      },\n      renderer: columnrenderer\n    }];\n    // delete item\n    this.apiSubscribe = this.sharedService.unitlistdeleteindexcast.subscribe(id => {\n\n      if (id != null) {\n\n        var params = {\n          menuRoleSecLevelId: id,\n          deleteBy: parseInt(this.sessionService.userId)\n        }\n\n        this.screenService.deleteMenuRoleSecLevel(params).subscribe((res: any) => {\n          this.getRolePermissionList();\n        }, error => {\n          console.log(error);\n        });\n\n\n      }\n\n    })\n    this.getRolePermissionList();\n  }\n  ngOnDestroy(){\n    this.apiSubscribe.unsubscribe();\n  }\n  getRolePermissionList() {\n    this.isShowRoleList = false;\n    let param = {\n      apartmentId: this.sessionService.apartmentId\n    }\n    this.screenService.getAllDefaultMenuRoleSecLevelbyApartmentId(param).subscribe(\n      (resp: any) => {\n        let refMenuData = resp.filter(data => {\n          return data.isActive\n        });\n        let gridSourceData = {\n          localdata: refMenuData,\n          datatype: \"array\"\n\n        }\n        this.roleList = new jqx.dataAdapter(gridSourceData);\n        this.isShowRoleList = true;\n        this.isEnableCreate = true;\n      }\n    )\n  }\n\n  \n  onGlSearchFilter() {\n\n    if(this.roleSearch != \"\"){\n\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = this.roleSearch;\n      let filtercondition = 'contains';\n      let filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.operator = 'or';\n      filtergroup.addfilter(filter_or_operator, filterData);\n\n      this.datagrid.showfiltercolumnbackground(false);\n\n      this.roleHeader.forEach(item => {\n        if(item.datafield != 'Actions') {\n          this.datagrid.addfilter(item.datafield, filtergroup, true);\n        }\n      })\n\n      this.datagrid.applyfilters();\n      \n    }\n    else {\n      this.datagrid.clearfilters();\n    }\n\n  }\n\n}\n\nfunction navigateToPermission(row) {\n  var event = new CustomEvent('navigateToPermission', {\n    detail: {\n      rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).navigateToPermission = navigateToPermission;\n\nfunction onEditRole(row) {\n  var event = new CustomEvent('onEditRole', {\n    detail: {\n      rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).onEditRole = onEditRole;\n\nfunction onDeleteRole(row) {\n  var event = new CustomEvent('onDeleteRole', {\n    detail: {\n      rowId: row\n    }\n  })\n  window.dispatchEvent(event);\n}\n(window as any).onDeleteRole = onDeleteRole;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddRoleComponent } from './add-role/add-role.component';\nimport { ConfigureRolesComponent } from './configure-roles/configure-roles.component';\nimport { RoleTypeListComponent } from './role-type-list/role-type-list.component';\nimport { RolesAndPermissionsListComponent } from './roles-and-permissions-list/roles-and-permissions-list.component';\nimport { SetPermissionsComponent } from './set-permissions/set-permissions.component';\n\n\n\n\nconst routes: Routes = [\n\t{ path: '', redirectTo: 'roles-permissions-list', pathMatch: 'full'},\n\t{ path: 'roles-permissions-list', component: RolesAndPermissionsListComponent},\n\t{ path: 'roles-type-list', component: RoleTypeListComponent},\n\t{ path: 'set-permission', component: SetPermissionsComponent},\n\t{ path: 'role-type', component: AddRoleComponent},\n\t{ path: 'edit-role-type/:id', component: AddRoleComponent},\n\t{ path: 'configure-roles', component: ConfigureRolesComponent},\n\t{ path: 'edit-configure-roles/:id', component: ConfigureRolesComponent},\n\t{ path: '**', redirectTo: 'roles-permissions-list', pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RolesAndPermissionsRouting { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RolesAndPermissionsListComponent } from './roles-and-permissions-list/roles-and-permissions-list.component';\nimport { SetPermissionsComponent } from './set-permissions/set-permissions.component';\nimport { RolesAndPermissionsRouting } from './roles-and-permissions-routing.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport {MatListModule} from '@angular/material/list';\nimport { CondoCardModule } from 'src/app/modules/ui/card/card.module';\nimport { AddRoleComponent } from './add-role/add-role.component';\nimport { ConfigureRolesComponent } from './configure-roles/configure-roles.component';\nimport { RoleTypeListComponent } from './role-type-list/role-type-list.component';\nimport { SelectModule } from 'src/app/modules/ui/select/select.module';\n\nimport { CondoMessageModule } from 'src/app/modules/ui/message/message.module';\n\n\n\n@NgModule({\n  declarations: [RolesAndPermissionsListComponent, SetPermissionsComponent,AddRoleComponent, ConfigureRolesComponent, RoleTypeListComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    MatListModule,\n    CondoCardModule,\n    SelectModule,\n    CondoMessageModule,\n    RolesAndPermissionsRouting\n  ]\n})\nexport class RolesAndPermissionsModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3JvbGVzLWFuZC1wZXJtaXNzaW9ucy9zZXQtcGVybWlzc2lvbnMvc2V0LXBlcm1pc3Npb25zLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { ScreenService } from 'src/app/api/controllers/Screen';\nimport { ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { SharedService } from 'src/app/shared/services/shared.service';\n\n@Component({\n  selector: 'app-set-permissions',\n  templateUrl: './set-permissions.component.html',\n  styleUrls: ['./set-permissions.component.scss']\n})\nexport class SetPermissionsComponent implements OnInit {\n\n  public menuList: Array<any> = [];\n  public subMenuList: any;\n  public actionList: any;\n  public selectedMenuName: any;\n  public selectedSubMenuName: any;\n  public actions: any;\n  public secLevelId: any;\n  public roleId: any;\n  public isDataLoaded: boolean = false;\n  constructor(private screenService: ScreenService,\n    private sharedService: SharedService,\n    private activatedRoute: ActivatedRoute,\n    private sessionService: SessionService) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.queryParams.subscribe(params => {\n      this.secLevelId = params['secLevelId'];\n      this.roleId = params['roleId'];\n      this.getScreenList();\n    });\n    this.actionList = [\n      {\n        name: 'add',\n        functionId: 0,\n        checked: false\n      },\n      {\n        name: 'edit',\n        functionId: 0,\n        checked: false\n      },\n      {\n        name: 'display',\n        functionId: 0,\n        checked: false\n      },\n      {\n        name: 'delete',\n        functionId: 0,\n        checked: false\n      }\n    ]\n  }\n\n  getScreenList() {\n    this.isDataLoaded = false;\n    let queryParamBase = {\n      ApartmentId: this.sessionService.apartmentId,\n      RoleId: parseInt(this.roleId),\n      secLevelId: parseInt(this.secLevelId)\n    };\n    this.screenService.getMenuFunctionByRoleIdMultiFilter(queryParamBase).subscribe(\n      (resp: any) => {\n        this.menuList = resp.responseData.value;\n        if (this.menuList && this.menuList.length) {\n          this.selectedMenuName = this.menuList[0].menuName;\n          this.changeMenu('');\n        }\n        this.isDataLoaded = true;\n      }\n    )\n  }\n\n  changeMenu(event) {\n    if (event) {\n      this.selectedMenuName = event.option.value ? event.option.value.menuName : '';\n    }\n    if (this.selectedMenuName) {\n      this.menuList.filter(key => {\n        if (key.menuName == this.selectedMenuName) {\n          this.subMenuList = key.subMenuNames;\n          this.selectedSubMenuName = this.subMenuList.length ? this.subMenuList[0].subMenuName : '';\n          this.changeSubMenu('')\n        }\n      })\n    }\n  }\n  changeSubMenu(event) {\n    if (event) {\n      this.actions = event.option.value ? event.option.value.actions : {};\n      this.mapActions();\n    } else {\n      this.subMenuList.filter(key => {\n        if (this.selectedSubMenuName == key.subMenuName) {\n          this.actions = key.actions;\n          this.mapActions();\n        }\n      })\n    }\n  }\n\n  mapActions() {\n    this.actionList[0].functionId = this.actions.add_FunctionId;\n    this.actionList[1].functionId = this.actions.edit_FunctionId;\n    this.actionList[2].functionId = this.actions.display_FunctionId;\n    this.actionList[3].functionId = this.actions.delete_FunctionId;\n    this.actionList[0].checked = this.actions.add;\n    this.actionList[1].checked = this.actions.edit;\n    this.actionList[2].checked = this.actions.display;\n    this.actionList[3].checked = this.actions.delete;\n  }\n\n  changeActions(event) {\n    if (event.option.value) {\n      let queryParamBase = {\n        apartmentId: this.sessionService.apartmentId,\n        menuSecLevelFunctionId: event.option.value.functionId,\n        isActive: !event.option.value.checked,\n        updatedBy: this.sessionService.roleId,\n      };\n      this.screenService.updateMenuSecLevelFunctionMapping(queryParamBase).subscribe(\n        (resp: any) => {\n          this.sharedService.openSnackBar(`${event.option.value.name} Permission Updated!`, 'success')\n        });\n    }\n  }\n\n\n}\n"]}
{"version":3,"sources":["webpack:///src/app/auth.guard.ts","webpack:///src/app/redirect.guard.ts","webpack:///src/app/shared/services/shared-toaster.service.ts"],"names":["AuthGuard","cookieService","router","route","dialog","next","state","get","path","window","location","pathname","indexOf","navigate","RedirectGuard","href","data","SharedToasterService","snackBar","message","action","open","duration","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,QAAaA,SAAS;AAAA;AAAA;AAGpB,yBACUC,aADV,EAEUC,MAFV,EAGUC,KAHV,EAISC,MAJT,EAI0B;AAAA;;AAHhB,aAAAH,aAAA,GAAAA,aAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,KAAA,GAAAA,KAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AAER;;AATmB;AAAA;AAAA,oCAYlBC,IAZkB,EAalBC,KAbkB,EAaQ;AAG1B,cAAG,KAAKL,aAAL,CAAmBM,GAAnB,CAAuB,OAAvB,KAAmC,EAAtC,EAAyC;AAEvC,gBAAIC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAA3B,CAFuC,CAIvC;;AACA,gBAAGH,IAAI,CAACI,OAAL,CAAa,eAAb,KAAiC,CAAC,CAArC,EAAuC;AACrC,kBAAG,KAAKX,aAAL,CAAmBM,GAAnB,CAAuB,SAAvB,KAAqC,KAAxC,EAA8C;AAC5C,uBAAO,IAAP;AACD,eAFD,MAGK;AACH,qBAAKL,MAAL,CAAYW,QAAZ,CAAqB,CAAC,MAAD,CAArB;AACD;AACF;;AACD,mBAAO,IAAP;AAED,WAfD,MAeK;AAEH,iBAAKX,MAAL,CAAYW,QAAZ,CAAqB,CAAC,aAAD,CAArB;AAEA,mBAAO,KAAP;AACD;AACF;AArCmB;;AAAA;AAAA,OAAtB;;;;cAI0B;;cACN;;cACF;;cACC;;;;AAPNb,aAAS,6DAFrB,kEAEqB,E,+EAII,gE,EACN,sD,EACF,8D,EACC,kE,EAPG,GAATA,SAAS,CAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRb,QAAac,aAAa;AAAA;AAAA;AAExB,6BAAoBZ,MAApB,EAAoC;AAAA;;AAAhB,aAAAA,MAAA,GAAAA,MAAA;AAAkB;;AAFd;AAAA;AAAA,oCAIZC,KAJY,EAImBG,KAJnB,EAI6C;AAEjEG,gBAAM,CAACC,QAAP,CAAgBK,IAAhB,GAAuBZ,KAAK,CAACa,IAAN,CAAW,aAAX,CAAvB;AACA,iBAAO,IAAP;AAEH;AATuB;;AAAA;AAAA,OAA1B;;;;cAE8B;;;;AAFjBF,iBAAa,6DADzB,kEACyB,E,+EAEI,sD,EAFJ,GAAbA,aAAa,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEb,QAAaG,oBAAoB;AAAA;AAAA;AAE/B,oCAAmBC,QAAnB,EAA0C;AAAA;;AAAvB,aAAAA,QAAA,GAAAA,QAAA;AAA0B;;AAFd;AAAA;AAAA,qCAIlBC,OAJkB,EAIDC,MAJC,EAIe;AAC5C,eAAKF,QAAL,CAAcG,IAAd,CAAmBF,OAAnB,EAA4BC,MAA5B,EAAoC;AAClCE,oBAAQ,EAAE;AADwB,WAApC;AAGD;AAR8B;;AAAA;AAAA,OAAjC;;;;cAE+B;;;;AAFlBL,wBAAoB,6DAHhC,iEAAW;AACVM,gBAAU,EAAE;AADF,KAAX,CAGgC,E,+EAEF,uE,EAFE,GAApBN,oBAAoB,CAApB","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatDialogRef } from \"@angular/material/dialog\";\n\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n\n@Injectable()\n\nexport class AuthGuard implements CanActivate {\n  \n\n  constructor(\n    private cookieService:CookieService,\n    private router: Router,\n    private route:ActivatedRoute,\n    public dialog: MatDialog){\n\n  }\n  \n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n\n    if(this.cookieService.get('token') != \"\"){\n\n      var path = window.location.pathname;\n      \n      // reset password page\n      if(path.indexOf(\"resetpassword\") != -1){\n        if(this.cookieService.get('isReset') == \"yes\"){\n          return true\n        }\n        else {\n          this.router.navigate(['/ams']);\n        }\n      }\n      return true;\n      \n    }else{\n\n      this.router.navigate(['/home/login']);\n\n      return false;\n    }\n  }\n}","import {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\n\n@Injectable()\nexport class RedirectGuard implements CanActivate {\n\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n\n      window.location.href = route.data['externalUrl'];\n      return true;\n\n  }\n}","import { Injectable } from '@angular/core';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedToasterService {\n\n  constructor(public snackBar: MatSnackBar) { }\n\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n}\n"]}
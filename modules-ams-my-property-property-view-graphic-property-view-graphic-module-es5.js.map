{"version":3,"sources":["webpack:///src/app/modules/ams/my-property/property-view-graphic/property-view-graphic.component.html","webpack:///src/app/modules/ams/my-property/property-view-graphic/property-view-graphic-routing.module.ts","webpack:///src/app/modules/ams/my-property/property-view-graphic/property-view-graphic.component.scss","webpack:///src/app/modules/ams/my-property/property-view-graphic/property-view-graphic.component.ts","webpack:///src/app/modules/ams/my-property/property-view-graphic/property-view-graphic.module.ts"],"names":["routes","path","component","PropertyViewGraphicRoutingModule","imports","forChild","exports","graph","PropertyViewGraphicComponent","element","apartmentService","documentService","cookieService","fileUploadService","fileDownloadService","sanitizer","lookupService","propertyManagerService","dialog","sessionService","fileDetailService","loading","isShowBuilder","bNo","fNo","towerList","floorList","propertyTypeList","unitFilterList","isShowOver","localStorage","setItem","bootMe","getBlockList","getPropertyType","id","name","Number","selectedPropertyType","getUnitProperty","getAssetProperty","getFacilityProperty","getMaintananceProperty","getParam","apartmentId","propertyPOIType","getAllPropertyPoiUnitByPropertyPoiType","subscribe","resp","getAllPropertyPoiAssetByPropertyPoiType","getAllPropertyPoiFacilityByPropertyPoiType","getAllPropertyPoiOpMaintenanceByPropertyPoiType","param","getApartmentBlockByApartmentId","selectedTower","apartmentBlockId","getFloorList","error","getFloorParam","apartmentblockId","getApartmentBlockFloorByApartmentIdBlockId","length","selectedFloor","apartmentBlockFloorId","selectFloor","filter","key","selectedFloorLabel","floorLabel","selectedFloorNo","floorno","getPropertyMap","propertyMapFileId","getLookUpParam","ApartmentId","LookupTypeId","getLookupValueByLookupTypeId","type","data","onChangeVal","dialogRef","open","width","position","right","afterClosed","result","objectVal","push","splice","console","log","toString","$","val","nodeId","poiId","updatePOI","uploadResponse","status","event","file","userId","parseInt","get","upload","res","undefined","isUploadCompleted","addPropertyMap","fileId","propertyId","getFloorProperty","getPropertyMapFileById","floorPropertyData","assignData","floorPictureFileDetailsId","mapJsonFile","setTimeout","svgElem","document","getElementById","parentNode","removeChild","getFileDetails","deleteGraph","customGraphUpdate","imageId","newParams","fileDetailsId","getFileDetailsById","downloadFile","filePath","blob","body","objectURL","URL","createObjectURL","sanitizeUrl","bypassSecurityTrustUrl","customImageUpdalod","changingThisBreaksApplicationSecurity","downloadParam","fileNameOnBlob","savefileNameWithPath","downloadAsync","docEl","documentElement","bodyEl","getElementsByTagName","window","innerWidth","clientWidth","height","innerHeight","clientHeight","nodes","edges","svg","d3","select","append","attr","GraphCreator","setIdCt","downloadGraph","propertyMapFile","JSON","stringify","updatedGraph","Date","toISOString","addPropertyMapFile","updatePropertyMap","updatePropertyMapFile","savePFNodes","saveEdges","savePFEdges","prefix","sid","tid","nobj","savePFNode","forEach","i","x","y","kind","source","target","fullObj","maponly","idct","buildingNo","floorNo","output","selectedObj","selectedCategory","selectedUnitFilterValue","setPOIId","updateProperty","fileUpload","nativeElement","find","trigger","removeItem","selector","template","PropertyViewGraphicModule","declarations","bootstrap"],"mappings":"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","file":"modules-ams-my-property-property-view-graphic-property-view-graphic-module-es5.js","sourcesContent":["export default \"<div class=\\\"poiManagement m-5\\\">\\n    <div class=\\\"topBar\\\">\\n      <div class=\\\"row pos-r\\\">\\n        <div class=\\\"col-md-12 col-lg-12 col-sm-12 col-xs-12 d-flex\\\">\\n          <div class=\\\"col-lg-3 col-md-3 col-sm-3 col-xs-12\\\">\\n            <label>Select Tower</label>\\n            <select class=\\\"form-control\\\" name=\\\"tower\\\" [(ngModel)]=\\\"selectedTower\\\" (change)=\\\"getFloorList()\\\" >\\n              <option *ngFor=\\\"let tower of towerList\\\"  [(value)]=\\\"tower.apartmentBlockId\\\">{{tower.description}}</option>\\n            </select>\\n          </div>\\n          <div class=\\\"col-lg-3 col-md-3 col-sm-3 col-xs-12\\\">\\n            <label>Select Floor</label>\\n            <select class=\\\"form-control\\\" name=\\\"floor\\\" [(ngModel)]=\\\"selectedFloor\\\" (change)=\\\"selectFloor()\\\">\\n              <option *ngFor=\\\"let floor of floorList\\\"  [(value)]=\\\"floor.apartmentBlockFloorId\\\">{{floor.floorLabel}}</option>\\n            </select>\\n          </div>\\n          <div class=\\\"col-lg-3 col-md-3 col-sm-3 col-xs-12\\\" *ngIf=\\\"selectedFloor\\\" >\\n            <label>Property Type</label>\\n            <select  name=\\\"selectedPropertyType\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"selectedPropertyType\\\" (change)=\\\"selectPropertyType()\\\" >\\n              <option value=\\\"\\\" disabled selected hidden>Select</option>\\n              <option *ngFor=\\\"let item of propertyTypeList\\\" value=\\\"{{item.lookupValueId}}\\\">\\n                  {{item.lookupValueName}}</option>\\n          </select>\\n          </div>\\n          <div class=\\\"col-lg-3 col-md-3 col-sm-3 col-xs-12\\\" *ngIf=\\\"selectedFloor\\\" >\\n            <label>Unit Category</label>\\n            <select [(ngModel)]=\\\"selectedUnitFilterValue\\\" name=\\\"selectedUnitFilterValue\\\" class=\\\"form-control\\\" (change)=\\\"selectedUnitFilter()\\\" >\\n              <option value=\\\"\\\" disabled selected hidden>Select</option>\\n              <option *ngFor=\\\"let item of unitFilterList\\\" value=\\\"{{item.id}}\\\">{{item?.name}}</option>\\n          </select>\\n          </div>\\n        </div>\\n        <div [hidden]=\\\"true\\\">\\n          <input type=\\\"text\\\" id=\\\"buildingNo\\\" value=\\\"\\\" placeholder=\\\"Building No\\\" [(ngModel)]=\\\"bNo\\\">\\n          <input type=\\\"text\\\" id=\\\"floorNo\\\" value=\\\"\\\" placeholder=\\\"Floor No\\\" [(ngModel)]=\\\"fNo\\\">\\n        <input  #nodeId type=\\\"text\\\" id=\\\"spanNode\\\">\\n        <input  #poiId type=\\\"text\\\" id=\\\"poiId\\\">\\n        <input  #nodeKind type=\\\"text\\\" id=\\\"nodeKind\\\">\\n        <input  #type type=\\\"text\\\" id=\\\"type\\\">\\n        </div>\\n      </div>\\n    </div>\\n  <div class=\\\"pathBuilder\\\">\\n      <!--<md-progress-bar mode=\\\"indeterminate\\\"></md-progress-bar>-->\\n      <div class=\\\"dragContainer\\\" id=\\\"lcanvas\\\" [ngStyle]=\\\"isShowBuilder ? {'display':'flex','justify-content':'center'} : ''\\\">\\n        <!--<div class=\\\"floor\\\" id=\\\"lcanvas\\\">-->\\n        <!--<div id=\\\"image-wrapper\\\" *ngIf=\\\"isShowBuilder\\\">-->\\n        <!--</div>-->\\n        <!--</div>-->\\n        <ng-template #property>\\n          <div>\\n              <span>Unit</span>\\n          </div>\\n      </ng-template>\\n        <div class=\\\"upload\\\" [appDragAndDrop] *ngIf=\\\"!isShowBuilder\\\"\\n             id=\\\"setFloorImg\\\">    \\n          <!-- <img class=\\\"mb-5\\\" src=\\\"../../../../../assets/images/plus-circle-icon.png\\\" alt=\\\"\\\"> -->\\n          <p  class=\\\"addFloor\\\">Floor Plan Not Configured</p>\\n          <div class=\\\"legends\\\">\\n            <!-- <span class=\\\"d-flex\\\" >\\n             <img class=\\\"mr-20\\\" src=\\\"../../../../../assets/images/folder-icon.png\\\" alt=\\\"\\\">\\n              Browse File Computer</span> -->\\n          </div>\\n          <div class=\\\"borderLine\\\"></div>\\n          <span class=\\\"support\\\" >Supported File Formats</span>\\n          <div class=\\\"brandIcons\\\">\\n            <img src=\\\"../../../../../assets/images/jpg-icon.png\\\" alt=\\\"\\\">\\n            <img src=\\\"../../../../../assets/images/png-icon.png\\\" alt=\\\"\\\">\\n          </div>\\n          <span class=\\\"smallText\\\">Supported File Formats<span [style.direction]=\\\"'LTR'\\\">1000*1200 px</span></span>\\n        </div>\\n        <!-- <input type=\\\"file\\\" #fileInput (change)=\\\"uploadFile($event.target.files)\\\" id=\\\"hidden-bg-upload\\\" accept=\\\"image/x-png,image/jpeg\\\"> -->\\n        <!--<input type=\\\"file\\\" id=\\\"hidden-graph-upload\\\">-->\\n        <!--<img *ngIf=\\\"false\\\" id=\\\"pinch-zoom-image-id\\\" class=\\\"pinch-zoom-image\\\" src=\\\"../assets/images/floor_plan.jpg\\\">-->\\n      </div>\\n      <div class=\\\"customPopOver\\\" [style.display]=\\\"isShowOver\\\" [style.top]=\\\"styleTop\\\" [style.left]=\\\"styleLeft\\\" >\\n        <div class=\\\"customPopOverContent\\\">\\n          Property Details...\\n        </div>\\n      </div>\\n      <!-- <div class=\\\"floorLegendLeft\\\" *ngIf=\\\"isShowBuilder\\\">\\n        <img src=\\\"../../assets/icons/legend.png\\\" alt=\\\"\\\" (click)=\\\"isShowLegend = !isShowLegend\\\">\\n        <app-floating-btn class=\\\"applgout\\\"   [position]=\\\"{ top: '-6px', left: '40px'}\\\"\\n                          [custom]=\\\"true\\\"\\n                          *ngIf=\\\"isShowLegend\\\">\\n          <div class=\\\"legendBody\\\">\\n            <span class=\\\"legendData\\\" [style.direction]=\\\"langDirection\\\">{{langObj?.poi}}<span class=\\\"ml-2\\\">:</span> <span class=\\\"ml-2\\\" [style.color]=\\\"'#0fce21'\\\">{{rawPOIList?.poiCount ? rawPOIList?.poiCount : 0}}</span></span>\\n            <span class=\\\"legendData\\\" [style.direction]=\\\"langDirection\\\">{{langObj?.facility}} <span class=\\\"ml-2\\\">:</span> <span class=\\\"ml-2\\\" [style.color]=\\\"'#440084'\\\">{{rawPOIList?.facilityCount ? rawPOIList?.facilityCount : 0}}</span></span>\\n            <span class=\\\"legendData\\\" [style.direction]=\\\"langDirection\\\">{{langObj?.active}} <span class=\\\"ml-2\\\">:</span> <span class=\\\"ml-2\\\" [style.color]=\\\"'#12991f'\\\">{{rawPOIList?.activeCount ? rawPOIList?.activeCount : 0}}</span></span>\\n            <span class=\\\"dataLastChild\\\" [style.direction]=\\\"langDirection\\\">{{langObj?.inactive}} <span class=\\\"ml-2\\\">:</span> <span class=\\\"ml-2\\\" [style.color]=\\\"'#fd001a'\\\">{{rawPOIList?.inActiveCount ? rawPOIList?.inActiveCount : 0}}</span></span>\\n          </div>\\n        </app-floating-btn>\\n      </div> -->\\n      <!-- <div class=\\\"floorLegend\\\" *ngIf=\\\"isShowBuilder\\\">\\n        <div class=\\\"mb-12\\\">\\n          <label class=\\\"mr-8\\\"> To Add POI</label>\\n          <span>Shift+Click</span>\\n        </div>\\n        <div>\\n          <label  class=\\\"mr-8 ml-12\\\">To Delete POI/Path</label>\\n          <span>Shift+Delete</span>\\n        </div>\\n      </div> -->\\n    </div>\\n    </div>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PropertyViewGraphicComponent } from './property-view-graphic.component';\n\n\nexport const routes: Routes = [\n  { path: '', component: PropertyViewGraphicComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PropertyViewGraphicRoutingModule { }\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL215LXByb3BlcnR5L3Byb3BlcnR5LXZpZXctZ3JhcGhpYy9wcm9wZXJ0eS12aWV3LWdyYXBoaWMuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit, ViewChild, ElementRef, HostListener } from '@angular/core';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport { DocumentService } from 'src/app/api/controllers/Document';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadService } from 'src/app/shared/services/file-upload.service';\nimport { FileDownloadService } from 'src/app/shared/services/file-download.service';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { LookupService } from 'src/app/api/controllers/Lookup';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FileDetailsService } from 'src/app/api/controllers/FileDetails';\nimport { AddPropertyDialogComponent } from 'src/app/modules/ams/profile-settings/components/add-property-dialog/add-property-dialog.component';\nimport { SessionService } from 'src/app/core/session/session.service';\nimport { PropertyManagerService } from 'src/app/api/controllers/PropertyManager';\ndeclare var d3: any;\ndeclare var GraphCreator: any;\nvar graph;\n\n@Component({\n  selector: 'app-property-view-graphic',\n  templateUrl: './property-view-graphic.component.html',\n  styleUrls: ['./property-view-graphic.component.scss']\n})\nexport class PropertyViewGraphicComponent implements OnInit {\n\n  loading: boolean = true;\n  isShowBuilder: boolean = false;\n  savePFNode: any;\n  bNo: any = 0;\n  fNo: any = 0;\n  public towerList: Array<any> = [];\n  public floorList: Array<any> = [];\n  public floorPropertyData: any;\n  public updatedGraph: any;\n  public selectedTower: any;\n  public selectedFloor: any;\n  public selectedFloorLabel: any;\n  public selectedFloorNo: any;\n  public uploadResponse: any;\n  public onChangeVal: any;\n  public currentPOIId: any;\n  public propertyTypeList: Array<any> = [];\n  public unitFilterList: Array<any> = [];\n  public selectedUnitFilterValue: any;\n  public selectedPropertyType: any;\n  public styleTop: any;\n  public styleLeft: any;\n  public isShowOver = 'none';\n\n  @ViewChild('poiId') poiId: ElementRef;\n  @ViewChild('nodeId') nodeId: ElementRef;\n  @ViewChild('nodeKind') nodeKind: ElementRef;\n  @ViewChild('type') Nodetype: ElementRef;\n\n  constructor(private element: ElementRef,\n    private apartmentService: ApartmentService,\n    private documentService: DocumentService,\n    private cookieService: CookieService,\n    private fileUploadService: FileUploadService,\n    private fileDownloadService: FileDownloadService,\n    private sanitizer: DomSanitizer,\n    private lookupService: LookupService,\n    private propertyManagerService : PropertyManagerService,\n    public dialog: MatDialog,\n    private sessionService: SessionService,\n    private fileDetailService: FileDetailsService) {\n      localStorage.setItem('preventGraph','true');\n     }\n\n  ngOnInit(): void {\n    this.bootMe();\n    this.getBlockList();\n    this.getPropertyType();\n    this.unitFilterList = [\n      {\n        id: 'isAvailableForRent',\n        name: \"Available For Rent\"\n      },\n      {\n        id: 'isPetsAllowed',\n        name: \"Pets Allowed\"\n      },\n      {\n        id: 'isFurnished',\n        name: \"Furnished\"\n      },\n      {\n        id: 'isVacant',\n        name: \"Vacant\"\n      },\n      {\n        id: 'isSold',\n        name: \"Sold\"\n      },\n      {\n        id: 'constructionInProgress',\n        name: \"Construction In Progress\"\n      },\n      {\n        id: 'twoBR',\n        name: \"2 BR\"\n      }\n    ]\n  }\n\n  selectPropertyType() {\n    switch (Number(this.selectedPropertyType)) {\n      case 318:\n        this.getUnitProperty();\n        break;\n      case 319:\n        this.getAssetProperty();\n        break;\n      case 320:\n        this.getFacilityProperty();\n        break;\n      case 321:\n        this.getMaintananceProperty();\n        break;\n      default:\n        break;\n    }\n  }\n\n  getUnitProperty(){\n    let getParam = {\n      apartmentId:this.sessionService.apartmentId,\n      propertyPOIType:this.selectedPropertyType\n    }\n    this.propertyManagerService.getAllPropertyPoiUnitByPropertyPoiType(getParam).subscribe(\n      resp =>{\n\n      }\n    )\n  }\n\n  getAssetProperty(){\n    let getParam = {\n      apartmentId:this.sessionService.apartmentId,\n      propertyPOIType:this.selectedPropertyType\n    }\n    this.propertyManagerService.getAllPropertyPoiAssetByPropertyPoiType(getParam).subscribe(\n      resp =>{\n\n      }\n    )\n  }\n\n  getFacilityProperty(){\n    let getParam = {\n      apartmentId:this.sessionService.apartmentId,\n      propertyPOIType:this.selectedPropertyType\n    }\n    this.propertyManagerService.getAllPropertyPoiFacilityByPropertyPoiType(getParam).subscribe(\n      resp =>{\n\n      }\n    )\n  }\n\n  getMaintananceProperty(){\n    let getParam = {\n      apartmentId:this.sessionService.apartmentId,\n      propertyPOIType:this.selectedPropertyType\n    }\n    this.propertyManagerService.getAllPropertyPoiOpMaintenanceByPropertyPoiType(getParam).subscribe(\n      resp =>{\n\n      }\n    )\n  }\n\n  getBlockList() {\n    let param = {\n      apartmentId: this.sessionService.apartmentId\n    }\n    this.apartmentService.getApartmentBlockByApartmentId(param).subscribe(\n      (resp: any) => {\n        this.towerList = resp;\n        this.selectedTower = this.towerList[0].apartmentBlockId;\n        this.getFloorList();\n      },\n      error => {\n\n      }\n    )\n  }\n\n  getFloorList() {\n    let getFloorParam = {\n      apartmentId: this.sessionService.apartmentId,\n      apartmentblockId: this.selectedTower\n    }\n    this.apartmentService.getApartmentBlockFloorByApartmentIdBlockId(getFloorParam).subscribe(\n      (resp: any) => {\n        if (resp && resp.length) {\n          this.floorList = resp;\n          this.selectedFloor = this.floorList[0].apartmentBlockFloorId;\n          this.selectFloor();\n          // this.getPropertyMap(this.floorList[0].propertyMapFileId);\n        }\n      },\n      error => {\n\n      }\n    )\n  }\n\n  selectFloor() {\n    if (this.selectedFloor) {\n      this.floorList.filter(key => {\n        if (key.apartmentBlockFloorId == this.selectedFloor) {\n          this.selectedFloorLabel = key.floorLabel;\n          this.selectedFloorNo = key.floorno;\n          this.getPropertyMap(key.propertyMapFileId);\n        }\n      })\n    }\n  }\n\n\n  getPropertyType() {\n    let getLookUpParam = {\n      ApartmentId: this.sessionService.apartmentId,\n      LookupTypeId: 196\n    }\n    this.lookupService.getLookupValueByLookupTypeId(getLookUpParam).subscribe(\n      (resp: any) => {\n        this.propertyTypeList = resp;\n      },\n      error => {\n\n      }\n    )\n  }\n\n  addProperty(type): void {\n    let data: any = this.onChangeVal;\n    data['type'] = type;\n    data['apartmentBlockId'] = this.selectedFloor;\n    const dialogRef = this.dialog.open(AddPropertyDialogComponent, {\n      width: '20%',\n      position: {\n        right: '10%'\n      },\n      data: data\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let objectVal: Array<string> = [];\n        for (const key in result) {\n          objectVal.push(key)\n        }\n        objectVal.splice(0, 2);\n        // let arrObjVal = JSON.stringify(objectVal);\n        console.log(objectVal.toString());\n        $('#nodeKind').val(objectVal.toString());\n        $('#spanNode').val(this.onChangeVal.nodeId);\n        $('#poiId').val(result.poiId);\n        $('#type').val(result.type);\n        this.updatePOI();\n      }\n    });\n  }\n\n  isUploadCompleted() {\n    return this.uploadResponse.status == \"completed\" ? true : false;\n  }\n\n  uploadFile(event) {\n    let file = event[0];\n    let userId = parseInt(this.cookieService.get('userId'))\n\n    this.fileUploadService.upload(file, userId).subscribe((res: any) => {\n\n      if (res != undefined) {\n        this.uploadResponse = res;\n      }\n      if (this.isUploadCompleted()) {\n        this.addPropertyMap(this.uploadResponse.fileId)\n      }\n    })\n  }\n\n\n  getPropertyMap(propertyId) {\n    let getFloorProperty = {\n      propertyMapFileId: propertyId\n    }\n    this.apartmentService.getPropertyMapFileById(getFloorProperty).subscribe(\n      (resp: any) => {\n        if (resp && resp.length) {\n          this.floorPropertyData = resp[0];\n          this.assignData(this.floorPropertyData)\n        }\n      },\n      error => {\n\n      }\n    )\n  }\n\n  assignData(data) {\n    if (data && data.floorPictureFileDetailsId && data.floorPictureFileDetailsId != 0 && data.mapJsonFile != \"\") {\n      this.isShowBuilder = true;\n      setTimeout(() => {\n        let svgElem = document.getElementById('bgimage');\n        if (svgElem) {\n          svgElem.parentNode.removeChild(svgElem);\n        }\n        this.getFileDetails(data.floorPictureFileDetailsId);\n        graph.deleteGraph();\n        graph.customGraphUpdate(data.mapJsonFile, undefined);\n      }, 1)\n    } else if (data && data.floorPictureFileDetailsId && data.floorPictureFileDetailsId != 0) {\n      this.isShowBuilder = true;\n      setTimeout(() => {\n        let svgElem = document.getElementById('bgimage');\n        if (svgElem) {\n          svgElem.parentNode.removeChild(svgElem);\n        }\n        this.getFileDetails(data.floorPictureFileDetailsId);\n        // graph.customImageUpdalod(this.getImage(data.floorPictureFileDetailsId));\n      }, 1)\n    } else {\n      this.isShowBuilder = false;\n    }\n  }\n\n  getFileDetails(imageId) {\n    let newParams = {\n      fileDetailsId: imageId,\n      apartmentId: this.sessionService.apartmentId\n    }\n\n    this.fileDetailService.getFileDetailsById(newParams).subscribe((res: any) => {\n      this.downloadFile(res[0].filePath)\n    })\n  }\n\n  downloadFile(filePath) {\n    this.fileDownloadService.downloadFile(filePath).subscribe((res: any) => {\n      const blob = res.body\n      let objectURL = URL.createObjectURL(blob);\n      let sanitizeUrl: any = this.sanitizer.bypassSecurityTrustUrl(objectURL);\n      graph.customImageUpdalod(sanitizeUrl.changingThisBreaksApplicationSecurity);\n    })\n\n  }\n\n  getImage(floorPictureFileDetailsId) {\n    let downloadParam = {\n      fileNameOnBlob: floorPictureFileDetailsId,\n      savefileNameWithPath: ''\n    }\n    this.fileDetailService.downloadAsync(downloadParam).subscribe(\n      resp => {\n        return resp;\n      },\n      error => {\n\n      }\n    )\n  }\n\n  bootMe() {\n    let docEl = document.documentElement,\n      bodyEl = document.getElementsByTagName('body')[0];\n\n    let width = window.innerWidth || docEl.clientWidth || bodyEl.clientWidth,\n      height = window.innerHeight || docEl.clientHeight || bodyEl.clientHeight;\n    // initial node data\n    var nodes = [];\n    var edges = [];\n    /** MAIN SVG **/\n    var svg = d3.select(\"#lcanvas\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n    graph = new GraphCreator(svg, nodes, edges);\n    graph.setIdCt(0);\n    // this.graph.updateGraph();\n  }\n\n  addPropertyMap(imageId) {\n    this.downloadGraph();\n    let addPropertyMap = {\n      propertyMapFile: {\n        \"propertyMapFileId\": 0,\n        \"apartmentId\": this.sessionService.apartmentId,\n        \"apartmentBlockId\": this.selectedTower,\n        \"description\": \"\",\n        \"isIndoor\": true,\n        \"floorno\": this.selectedFloorNo,\n        \"floorLabel\": this.selectedFloorLabel,\n        \"floorPictureFileDetailsId\": imageId,\n        \"mapJsonFile\": JSON.stringify(this.updatedGraph),\n        \"isActive\": true,\n        \"insertedBy\": parseInt(this.cookieService.get('userId')),\n        \"insertedOn\": new Date().toISOString(),\n        \"updatedBy\": 0,\n        \"updatedOn\": new Date().toISOString(),\n        \"apartmentBlockFloorId\": this.selectedFloor\n      }\n    }\n    this.apartmentService.addPropertyMapFile(addPropertyMap).subscribe(\n      (resp: any) => {\n        this.floorPropertyData = resp;\n        this.assignData(this.floorPropertyData)\n      },\n      error => {\n\n      }\n    )\n  }\n\n  updateProperty() {\n    this.downloadGraph();\n    let updatePropertyMap = {\n      propertyMapFile: {\n        \"propertyMapFileId\": this.floorPropertyData.propertyMapFileId,\n        \"apartmentId\": this.sessionService.apartmentId,\n        \"apartmentBlockId\": this.selectedFloor,\n        \"description\": \"\",\n        \"isIndoor\": true,\n        \"floorno\": this.selectedFloorNo,\n        \"floorLabel\": this.selectedFloorLabel,\n        \"floorPictureFileDetailsId\": this.floorPropertyData.floorPictureFileDetailsId,\n        \"mapJsonFile\": JSON.stringify(this.updatedGraph),\n        \"isActive\": true,\n        \"insertedBy\": 0,\n        \"insertedOn\": new Date().toISOString(),\n        \"updatedBy\": parseInt(this.cookieService.get('userId')),\n        \"updatedOn\": new Date().toISOString(),\n        \"apartmentBlockFloorId\": this.selectedTower\n      }\n    }\n    this.apartmentService.updatePropertyMapFile(updatePropertyMap).subscribe(\n      (resp: any) => {\n        this.floorPropertyData = resp;\n        // this.assignData(this.floorPropertyData)\n      },\n      error => {\n\n      }\n    )\n  }\n\n  downloadGraph() {\n    var savePFNodes = [];\n    var saveEdges = [];\n    var savePFEdges = [];\n\n    var prefix = this.bNo + \"_\" + this.fNo + \"_\";\n    var sid, tid;\n    var nobj;\n    this.savePFNode = [];\n    graph.nodes.forEach(function (val, i) {\n      nobj = {}\n      nobj.id = prefix + val.id\n      nobj.x = val.x\n      nobj.y = val.y\n      nobj.poiId = val.poiId\n      nobj.kind = val.kind\n      savePFNodes.push(nobj)\n    });\n    this.savePFNode = savePFNodes;\n    graph.edges.forEach(function (val, i) {\n      saveEdges.push({ source: val.source.id, target: val.target.id });\n      sid = prefix + val.source.id;\n      tid = prefix + val.target.id;\n      savePFEdges.push({ source: sid, target: tid });\n    });\n    var fullObj = {\n      maponly: {\n        idct: graph.idct,\n        buildingNo: this.bNo,\n        floorNo: this.fNo,\n        nodes: graph.nodes,\n        edges: saveEdges\n      }, output: {\n        floorNo: this.fNo,\n        nodes: savePFNodes,\n        edges: savePFEdges\n      }\n    };\n    this.updatedGraph = fullObj;\n    /*fullObj.maponly.idct = graph.idct\n    fullObj.maponly.buildingNo = this.bNo\n    fullObj.maponly.floorNo = this.fNo\n    fullObj.maponly.nodes = graph.nodes\n    fullObj.maponly.edges = saveEdges\n    fullObj.output.floorNo = this.fNo\n    fullObj.output.nodes = savePFNodes\n    fullObj.output.edges = savePFEdges*/\n\n    // var blob = new Blob([JSON.stringify(fullObj)], {type: \"text/plain;charset=utf-8\"});\n    // //for time being commented out\n    // saveAs(blob, \"mydag.json\");\n  }\n\n  selectedUnitFilter() {\n    let selectedObj = { type: this.selectedPropertyType, selectedCategory: this.selectedUnitFilterValue }\n    graph.customGraphUpdate(this.floorPropertyData.mapJsonFile, selectedObj);\n  }\n\n  updatePOI() {\n    if ($('#poiId').val() && $('#nodeKind').val() && $('#spanNode').val()) {\n      graph.setPOIId();\n      this.updateProperty();\n    }\n  }\n\n  browseFile() {\n    var fileUpload = $(this.element.nativeElement).find(\"input[id='hidden-bg-upload']\");\n    fileUpload.trigger(\"click\");\n  }\n\n  \n  ngOnDestroy(){\n    let svgElem = document.getElementById('bgimage');\n    if(svgElem){\n      svgElem.parentNode.removeChild(svgElem);\n    }\n    graph.deleteGraph();\n    localStorage.removeItem('preventGraph');\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RouterModule } from '@angular/router';\nimport { routes } from './property-view-graphic-routing.module';\nimport { PropertyViewGraphicRoutingModule } from './property-view-graphic-routing.module';\n\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { CondoCardModule } from 'src/app/modules/ui/card/card.module';\nimport { SelectModule } from 'src/app/modules/ui/select/select.module';\n\nimport { PropertyViewGraphicComponent } from './property-view-graphic.component';\n\n\n@NgModule({\n  declarations: [ PropertyViewGraphicComponent ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    CondoCardModule,\n    SelectModule,\n    RouterModule.forChild(routes),\n    PropertyViewGraphicRoutingModule\n  ],\n  bootstrap: [\n    PropertyViewGraphicComponent\n  ]\n})\nexport class PropertyViewGraphicModule { }\n"]}